"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analyze";
exports.ids = ["pages/api/analyze"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "cheerio":
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ ((module) => {

module.exports = import("cheerio");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/analyze.ts */ \"(api)/./pages/api/analyze.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analyze\",\n        pathname: \"/api/analyze\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFuYWx5emUmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmFuYWx5emUudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUQ7QUFDbkQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZG0tYnVpbGRlci8/YzRkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2FuYWx5emUudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/parser.ts":
/*!***********************!*\
  !*** ./lib/parser.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseProduct: () => (/* binding */ parseProduct)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"cheerio\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__]);\n([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Shape of the information we care about from a product page.\n *\n * These fields mirror the placeholders used in templates. Some\n * fields are optional because not every page will expose them.\n */ // ProductData type moved to lib/types.ts\n/**\n * Attempt to parse structured JSON-LD data from the page. Many\n * eâ€‘commerce platforms embed an object with the schema.org\n * Product type. This helper extracts it if present.\n */ function parseLdJson($) {\n    const scripts = $('script[type=\"application/ld+json\"]').toArray();\n    for (const el of scripts){\n        const contents = $(el).contents().text();\n        if (!contents) continue;\n        try {\n            const json = JSON.parse(contents.trim());\n            // Sometimes multiple objects are wrapped in an array.\n            const candidates = Array.isArray(json) ? json : [\n                json\n            ];\n            for (const obj of candidates){\n                if (obj[\"@type\"] === \"Product\") {\n                    return obj;\n                }\n            }\n        } catch (_) {\n        // ignore JSON parse errors and continue.\n        }\n    }\n    return null;\n}\n/**\n * Generic helper to extract a meta tag value. It first tries to\n * match the given property on the `meta[property]` attribute (as used\n * by Open Graph), then falls back to `meta[name]`.\n */ function getMeta($, prop) {\n    return $(`meta[property='${prop}']`).attr(\"content\") || $(`meta[name='${prop}']`).attr(\"content\") || null;\n}\n/**\n * Fetch a product page and extract basic fields using heuristics. This\n * function does not attempt to deeply crawl the DOM; instead it relies\n * on Open Graph tags, JSONâ€‘LD and common microdata attributes. If a\n * field cannot be resolved it will be returned as an empty string.\n *\n * If the request fails for whatever reason the resulting object will\n * contain empty strings for all properties except url and cta.\n *\n * @param url Product page URL\n */ async function parseProduct(url) {\n    const clean = (value)=>(value || \"\").toString().trim();\n    // Normalise image URLs (protocol-relative, root-relative, and relative paths)\n    const buildNormaliser = (pageUrl)=>{\n        let origin = \"\";\n        let basePath = \"\";\n        try {\n            const u = new URL(pageUrl);\n            origin = u.origin;\n            basePath = pageUrl.endsWith(\"/\") ? pageUrl : pageUrl.substring(0, pageUrl.lastIndexOf(\"/\") + 1);\n        } catch (_) {}\n        return (raw)=>{\n            const val = (raw || \"\").trim();\n            if (!val) return \"\";\n            if (/^https?:\\/\\//i.test(val)) return val;\n            if (val.startsWith(\"//\")) return `https:${val}`; // assume https for protocol-relative\n            if (val.startsWith(\"/\")) return origin ? origin + val : val; // root-relative\n            return basePath ? basePath + val : val; // relative path\n        };\n    };\n    const normalise = buildNormaliser(url);\n    let html = \"\";\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n            headers: {\n                // Set a user agent so that some sites donâ€™t block our request.\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0 Safari/537.36\"\n            },\n            // Follow redirects automatically.\n            maxRedirects: 3\n        });\n        html = response.data;\n    } catch (error) {\n        console.error(`Failed to fetch ${url}:`, error instanceof Error ? error.message : error);\n        return {\n            url,\n            pretitle: \"\",\n            title: \"\",\n            price: \"\",\n            description: \"\",\n            image: \"\",\n            images: undefined,\n            cta: url,\n            ctaLabel: \"SHOP NOW\"\n        };\n    }\n    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n    // Remove any mega-menu content to avoid polluting extraction\n    try {\n        const reMega = /mega[-_ ]?menu/i;\n        const toRemove = $(\"[class]\").filter((_, el)=>reMega.test($(el).attr(\"class\") || \"\")).toArray();\n        if (toRemove.length) $(toRemove).remove();\n    } catch (_) {}\n    // Attempt to parse JSONâ€‘LD structured data first because it typically\n    // provides the richest information. We fall back to meta tags if\n    // structured data is not present or incomplete.\n    const ld = parseLdJson($) || {};\n    const product = {\n        url,\n        pretitle: \"\",\n        title: \"\",\n        price: \"\",\n        originalPrice: undefined,\n        description: \"\",\n        metadataDescription: undefined,\n        image: \"\",\n        images: undefined,\n        cta: url,\n        // Default call-to-action label. Users can override this in the\n        // preview by editing the CTA text. If not provided, templates\n        // will fall back to this value.\n        ctaLabel: \"SHOP NOW\"\n    };\n    // Title\n    product.title = clean(ld.name) || clean(getMeta($, \"og:title\")) || clean(getMeta($, \"twitter:title\")) || clean($(\"title\").first().text());\n    // Description & metadata description\n    // We distinguish the page's canonical META description (<meta name=\"description\">)\n    // from other potential sources like JSON-LD Product.description or Open Graph / Twitter\n    // descriptions. Per requirement: metadataDescription must originate from the meta tag only.\n    const metaTagDescription = clean(getMeta($, \"description\"));\n    const ldDesc = clean(ld.description);\n    const ogDesc = clean(getMeta($, \"og:description\"));\n    const twitterDesc = clean(getMeta($, \"twitter:description\"));\n    // Assign only the literal <meta name=\"description\"> content to metadataDescription\n    product.metadataDescription = metaTagDescription || undefined;\n    if (metaTagDescription) {\n        product.originalMetadataDescription = metaTagDescription;\n    }\n    // Default user-facing description prefers the meta tag, then structured data, then OG/Twitter.\n    product.description = metaTagDescription || ldDesc || ogDesc || twitterDesc || \"\";\n    // Extract specific description sources from .product__description\n    try {\n        const descRoot = $(\".product__description\").first();\n        if (descRoot && descRoot.length) {\n            const p = descRoot.find(\"p\").first();\n            if (p && p.length) {\n                product.descriptionP = clean(p.text());\n            }\n            const ul = descRoot.find(\"ul\").first();\n            if (ul && ul.length) {\n                // Preserve UL structure as HTML for email preview/template\n                product.descriptionUl = $.html(ul);\n            }\n        }\n    } catch (e) {\n    // ignore extraction errors\n    }\n    // Image\n    const ldImage = Array.isArray(ld.image) ? ld.image[0] : typeof ld.image === \"string\" ? ld.image : undefined;\n    product.image = normalise(clean(ldImage) || clean(getMeta($, \"og:image\")) || clean(getMeta($, \"twitter:image\")) || clean($(\"img\").first().attr(\"src\")));\n    // Price\n    const ldOffers = ld.offers;\n    let ldPrice;\n    if (ldOffers) {\n        if (Array.isArray(ldOffers)) {\n            ldPrice = ldOffers[0]?.price;\n        } else if (typeof ldOffers === \"object\") {\n            ldPrice = ldOffers.price;\n        }\n    }\n    product.price = clean(ldPrice) || clean(getMeta($, \"product:price:amount\")) || clean(getMeta($, \"og:price:amount\")) || // Try to match microdata on sites like Shopify: [itemprop=\"price\"]\n    clean($('[itemprop=\"price\"]').first().text());\n    // Original price: attempt to find a compareâ€‘at or strikeâ€‘through price. This\n    // can appear in JSONâ€‘LD as an \"priceSpecification\" with\n    // \"priceCurrency\" and \"value\", or in the DOM as <del> or a span with\n    // class containing \"compare\" or \"strike\". We attempt several heuristics\n    // and take the first numeric value we find. The value returned does\n    // not include the currency symbol.\n    let original;\n    // Check JSONâ€‘LD offers.comparePrice if present\n    if (ldOffers) {\n        // Some schemas nest compareAtPrice or originalPrice\n        const getCompare = (obj)=>{\n            if (!obj) return undefined;\n            return obj.compareAtPrice || obj.originalPrice || obj.priceSpecification?.price;\n        };\n        if (Array.isArray(ldOffers)) {\n            for (const off of ldOffers){\n                const val = getCompare(off);\n                if (val) {\n                    original = clean(val);\n                    break;\n                }\n            }\n        } else if (typeof ldOffers === \"object\") {\n            const val = getCompare(ldOffers);\n            if (val) {\n                original = clean(val);\n            }\n        }\n    }\n    if (!original) {\n        // Look for elements containing a price with a lineâ€‘through style or a\n        // class indicating \"compare\" or \"original\". We extract numeric\n        // values (digits and decimal separators).\n        const priceRegex = /([\\d,.]+)\\s*(?:[A-Z]{3})?/;\n        // helper to parse text\n        const parsePriceText = (text)=>{\n            const match = priceRegex.exec(text);\n            return match ? match[1] : undefined;\n        };\n        // Check <del> elements\n        $(\"del, strike\").each((_, el)=>{\n            const text = $(el).text();\n            const val = parsePriceText(text);\n            if (val) {\n                original = clean(val);\n                return false; // break the loop\n            }\n        });\n        // Check elements with class containing compare or original\n        if (!original) {\n            $('[class*=\"compare\"],[class*=\"original\"],[class*=\"strike\"]').each((_, el)=>{\n                const text = $(el).text();\n                const val = parsePriceText(text);\n                if (val) {\n                    original = clean(val);\n                    return false;\n                }\n            });\n        }\n    }\n    // Assign originalPrice if found and different from sale price\n    if (original && original !== product.price) {\n        product.originalPrice = original;\n    }\n    // Pretitle: not widely available. As a heuristic, if the title\n    // contains a hyphen, split the first part as pretitle and the rest\n    // as the actual title.\n    if (product.title && product.title.includes(\" â€“ \")) {\n        const parts = product.title.split(/\\s+â€“\\s+/);\n        if (parts.length > 1) {\n            product.pretitle = parts[0];\n            product.title = parts.slice(1).join(\" â€“ \");\n        }\n    }\n    // Colour capture removed per refactor; no swatch detection\n    // Images: collect additional image URLs beyond the primary image. We\n    // start with the primary image if it exists. Then search for image\n    // elements that are likely part of the product gallery. Heuristics\n    // include class names containing \"product\", \"gallery\", \"thumb\", or\n    // \"image\". We also accept JSONâ€‘LD image arrays. Only absolute\n    // URLs (http or https) are kept and duplicates removed.\n    const imageSet = new Set();\n    if (product.image) {\n        imageSet.add(product.image);\n    }\n    // Add any additional images from JSONâ€‘LD\n    if (Array.isArray(ld.image)) {\n        for (const img of ld.image){\n            if (typeof img === \"string\") {\n                imageSet.add(normalise(img));\n            }\n        }\n    }\n    // DOM extraction: find images with relevant class hints\n    $(\"img\").each((_, el)=>{\n        const src = normalise($(el).attr(\"src\"));\n        if (!src) return;\n        if (!/\\.(jpe?g|png|gif|webp|avif|svg)(?:[?#].*)?$/i.test(src)) return;\n        // Accept images if they contain certain keywords in their class or id\n        const classes = ($(el).attr(\"class\") || \"\") + \" \" + ($(el).parent().attr(\"class\") || \"\");\n        const ids = ($(el).attr(\"id\") || \"\") + \" \" + ($(el).parent().attr(\"id\") || \"\");\n        const hay = classes + \" \" + ids;\n        if (/product|gallery|thumb|image|slider|carousel/i.test(hay)) {\n            imageSet.add(src);\n        }\n    });\n    // Additional extraction: attempt to fetch the Shopify .js endpoint for\n    // richer product data. Many Shopify stores expose a JSON file at\n    // <product-url>.js which contains an array of image URLs and the\n    // featured image. If the request fails or the response is not JSON,\n    // we silently ignore it. We prefix protocol-relative URLs with\n    // https: to ensure absolute paths. Any images found here are added\n    // to imageSet. This logic mirrors the working implementation from\n    // the provided reference package. It avoids slicing the JSON by\n    // braces and instead lets JSON.parse handle the string.\n    try {\n        const jsUrl = url.endsWith(\".js\") ? url : `${url}.js`;\n        const jsResp = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(jsUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0 Safari/537.36\"\n            },\n            maxRedirects: 3\n        });\n        const jsData = jsResp.data;\n        // If response is a string, attempt to parse JSON; if it's already\n        // an object we can process it directly. Some platforms escape\n        // unicode sequences, but JSON.parse will handle them.\n        const parsedData = typeof jsData === \"string\" ? JSON.parse(jsData) : typeof jsData === \"object\" ? jsData : null;\n        if (parsedData && typeof parsedData === \"object\") {\n            // Extract images array\n            const imgs = parsedData.images;\n            if (Array.isArray(imgs)) {\n                for (const p of imgs){\n                    if (typeof p === \"string\" && p) {\n                        const imgUrl = normalise(p.startsWith(\"//\") ? `https:${p}` : p);\n                        if (imgUrl) {\n                            imageSet.add(imgUrl);\n                        }\n                    }\n                }\n            }\n            // Extract featured image\n            const feat = parsedData.featured_image;\n            if (typeof feat === \"string\" && feat) {\n                const full = normalise(feat.startsWith(\"//\") ? `https:${feat}` : feat);\n                if (full) {\n                    imageSet.add(full);\n                }\n            }\n        }\n    } catch (err) {\n    // Silently ignore errors; the JSON endpoint may not exist or may not\n    // return valid JSON. In such cases we simply rely on images\n    // extracted from the HTML and JSON-LD.\n    }\n    // Assign images array if more than one image is found\n    const imagesArr = Array.from(imageSet);\n    if (imagesArr.length > 0) {\n        // Assign the images directly from imageSet. The imageSet itself\n        // already deduplicates exact URLs while preserving insertion order.\n        // We no longer deduplicate by base path (query parameters) because\n        // some stores use the same base for different images. Instead we\n        // preserve all unique URLs. We still move the primary image to\n        // the front of the array if it exists and is not already first.\n        let deduped = imagesArr;\n        if (product.image) {\n            const index = deduped.findIndex((i)=>i === product.image);\n            if (index > 0) {\n                const [img] = deduped.splice(index, 1);\n                deduped.unshift(img);\n            } else if (index === -1) {\n                deduped.unshift(product.image);\n            }\n        }\n        product.images = deduped;\n    }\n    return product;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/parser.ts\n");

/***/ }),

/***/ "(api)/./pages/api/analyze.ts":
/*!******************************!*\
  !*** ./pages/api/analyze.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"cheerio\");\n/* harmony import */ var _lib_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/parser */ \"(api)/./lib/parser.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__, _lib_parser__WEBPACK_IMPORTED_MODULE_2__]);\n([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__, _lib_parser__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nfunction absoluteUrl(base, url) {\n    if (!url) return \"\";\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) return url;\n    if (url.startsWith(\"//\")) return \"https:\" + url;\n    if (url.startsWith(\"/\")) return new URL(base).origin + url;\n    try {\n        return new URL(url, base).toString();\n    } catch  {\n        return url;\n    }\n}\nfunction rgbToHex(input) {\n    // supports rgb(a) like rgb(255,0,0) or rgba(255,0,0,1)\n    const m = input.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})/i);\n    if (!m) return null;\n    const r = Math.max(0, Math.min(255, parseInt(m[1], 10)));\n    const g = Math.max(0, Math.min(255, parseInt(m[2], 10)));\n    const b = Math.max(0, Math.min(255, parseInt(m[3], 10)));\n    const toHex = (n)=>n.toString(16).padStart(2, \"0\").toUpperCase();\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\nfunction normalizeColor(val) {\n    if (!val) return null;\n    const cleaned = val.trim().replace(/!important/i, \"\").trim();\n    if (/^var\\(/i.test(cleaned)) return null;\n    if (/^transparent$/i.test(cleaned)) return null;\n    if (/^currentColor$/i.test(cleaned)) return null;\n    // hex\n    const hex = cleaned.match(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i)?.[0];\n    if (hex) return hex.toUpperCase();\n    // rgb/rgba\n    const asHex = rgbToHex(cleaned);\n    if (asHex) return asHex;\n    return null;\n}\n// Extract color candidates from CSS and inline styles for announcement bars and CTAs\nfunction extractColorCandidates($, baseCssTexts) {\n    const candidates = [];\n    const push = (source, color)=>{\n        const c = color && normalizeColor(color);\n        if (!c) return;\n        candidates.push({\n            source,\n            color: c\n        });\n    };\n    // From inline styles of announcement elements\n    $('[class*=\"announcement\" i], [class*=\"anouncement\" i]').each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"announcement-bg\", mBg[1]);\n        const mBorder = style.match(/border(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBorder) push(\"announcement-border\", mBorder[1]);\n    });\n    // Utility bar backgrounds\n    $('.utility-bar, [class*=\"utility-bar\" i]').each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"utility-bar-bg\", mBg[1]);\n    });\n    // From inline styles of CTA-like elements\n    $('[class*=\"cta\" i], [class*=\"button\" i], [class*=\"btn\" i], [class*=\"add-to-cart\" i]').each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"cta-bg\", mBg[1]);\n        const mBorder = style.match(/border(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBorder) push(\"cta-border\", mBorder[1]);\n    });\n    // Explicit <button> elements\n    $(\"button\").each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"button-bg\", mBg[1]);\n        const mBorder = style.match(/border(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBorder) push(\"button-border\", mBorder[1]);\n    });\n    // Scan style tags for rules targeting announcement/cta classes\n    for (const css of baseCssTexts){\n        // announcement backgrounds\n        const reAnn = /\\.(?:[^\\.{\\s]*?(announcement|anouncement)[^\\s{]*)[^}]*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        let m;\n        while(m = reAnn.exec(css)){\n            push(\"announcement-bg\", m[2]);\n        }\n        // cta backgrounds\n        const reCtaBg = /\\.(?:[^\\.{\\s]*?(cta|button|btn)[^\\s{]*)[^}]*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reCtaBg.exec(css)){\n            push(\"cta-bg\", m[2]);\n        }\n        // cta borders\n        const reCtaBorder = /\\.(?:[^\\.{\\s]*?(cta|button|btn)[^\\s{]*)[^}]*\\{[^}]*?(border(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reCtaBorder.exec(css)){\n            push(\"cta-border\", m[2]);\n        }\n        // utility bar background\n        const reUtil = /\\.(?:[^\\.\\{\\s]*?(utility-bar)[^\\s{]*)[^}]*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reUtil.exec(css)){\n            push(\"utility-bar-bg\", m[2]);\n        }\n        // button tag styles\n        const reButtonTag = /button\\s*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reButtonTag.exec(css)){\n            push(\"button-bg\", m[1] || m[2]);\n        }\n    }\n    // Dedupe by color while preserving first occurrence\n    const seen = new Set();\n    return candidates.filter(({ color })=>seen.has(color) ? false : (seen.add(color), true));\n}\n// Extract --atlas-primary-color; fall back to meta theme-color\nfunction extractPrimaryAndText($) {\n    const styles = [];\n    $(\"style\").each((_, el)=>{\n        styles.push($(el).contents().text());\n    });\n    let primary = null;\n    for (const text of styles){\n        const m = text.match(/--atlas-primary-color\\s*:\\s*([^;\\n\\r]+)/i);\n        if (m && m[1]) {\n            primary = normalizeColor(m[1]);\n            if (primary) break;\n        }\n    }\n    const candidates = extractColorCandidates($, styles);\n    // theme-color as a low-priority candidate\n    const theme = $('meta[name=\"theme-color\"]').attr(\"content\");\n    const themeHex = theme ? normalizeColor(theme) : null;\n    if (themeHex) candidates.push({\n        source: \"theme-color\",\n        color: themeHex\n    });\n    // prefer atlas var, else announcement bg, cta bg, cta border, then theme\n    const preferred = primary || candidates[0]?.color || null;\n    // pick text color suggestion\n    let text = \"black\";\n    const hex = preferred || candidates[0]?.color || themeHex;\n    if (hex) {\n        // YIQ formula\n        const r = parseInt(hex.substring(1, 3), 16);\n        const g = parseInt(hex.substring(3, 5), 16);\n        const b = parseInt(hex.substring(5, 7), 16);\n        const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n        text = yiq >= 128 ? \"black\" : \"white\";\n    }\n    return {\n        candidates,\n        primary: preferred || undefined,\n        text\n    };\n}\nfunction extractFonts($) {\n    const set = new Set();\n    $('link[rel=\"stylesheet\"][href*=\"fonts.googleapis.com\"]').each((_, el)=>{\n        const href = $(el).attr(\"href\") || \"\";\n        const url = new URL(href, \"https://example.com\");\n        const fam = url.searchParams.get(\"family\");\n        if (fam) {\n            fam.split(\"|\").forEach((chunk)=>set.add(chunk.split(\":\")[0].replace(/\\+/g, \" \")));\n        }\n    });\n    $(\"style\").each((_, el)=>{\n        const text = $(el).contents().text();\n        const matches = text.match(/font-family\\s*:\\s*([^;\\}]+)/gi) || [];\n        matches.forEach((m)=>{\n            const fam = m.split(\":\")[1]?.trim().replace(/[\"']/g, \"\").split(\",\")[0]?.trim();\n            if (fam) set.add(fam);\n        });\n    });\n    const blocked = new Set([\n        \"sans-serif\",\n        \"serif\",\n        \"monospace\",\n        \"cursive\",\n        \"fantasy\",\n        \"emoji\",\n        \"math\",\n        \"fangsong\",\n        \"system-ui\",\n        \"inherit\",\n        \"initial\",\n        \"unset\"\n    ]);\n    const cleaned = Array.from(set).filter((f)=>f && !/^var\\(/i.test(f) && !/^--/.test(f) && !blocked.has(f.toLowerCase())).slice(0, 5);\n    return cleaned;\n}\nfunction collectImages($, base, type) {\n    const results = [];\n    const regex = type === \"hero\" ? /(main|slideshow|hero|header)/i : /(banner)/i;\n    $(\"img\").each((_, el)=>{\n        const $el = $(el);\n        const cls = ($el.attr(\"class\") || \"\") + \" \" + ($el.parent().attr(\"class\") || \"\");\n        const id = ($el.attr(\"id\") || \"\") + \" \" + ($el.parent().attr(\"id\") || \"\");\n        if (!regex.test(cls + \" \" + id)) return;\n        let src = $el.attr(\"src\") || $el.attr(\"data-src\") || \"\";\n        src = absoluteUrl(base, src);\n        if (!src) return;\n        // width heuristic: attribute width or src hints like _600x\n        const wAttr = parseInt($el.attr(\"width\") || \"0\", 10);\n        const okByAttr = !isNaN(wAttr) && wAttr >= 599;\n        const okBySrc = /[_-](6\\d\\d|[7-9]\\d\\d|\\d{4,})x/i.test(src) || /w(=|%3D)(6\\d\\d|[7-9]\\d\\d|\\d{4,})/i.test(src);\n        if (okByAttr || okBySrc) {\n            results.push(src);\n        }\n    });\n    // Dedupe preserving order\n    return Array.from(new Set(results));\n}\nfunction collectMobileBannerImages($, base) {\n    const results = [];\n    // direct class on img\n    $('img.mobile-banner, img[class*=\"mobile-banner\"]').each((_, el)=>{\n        let src = $(el).attr(\"src\") || $(el).attr(\"data-src\") || \"\";\n        src = absoluteUrl(base, src);\n        if (src) results.push(src);\n    });\n    // nested within elements with class mobile-banner\n    $('.mobile-banner img, [class*=\"mobile-banner\"] img').each((_, el)=>{\n        let src = $(el).attr(\"src\") || $(el).attr(\"data-src\") || \"\";\n        src = absoluteUrl(base, src);\n        if (src) results.push(src);\n    });\n    return Array.from(new Set(results));\n}\nfunction extractStoreName($, baseUrl) {\n    const og = $('meta[property=\"og:site_name\"]').attr(\"content\");\n    if (og) return og;\n    const title = $(\"title\").first().text().trim();\n    if (title) return title;\n    try {\n        const host = new URL(baseUrl).hostname.replace(/^www\\./, \"\");\n        return host.split(\".\")[0];\n    } catch  {\n        return \"\";\n    }\n}\nfunction extractLogo($, base) {\n    // search any element whose class includes 'logo'\n    const logoContainers = $('[class*=\"logo\" i]').toArray();\n    for (const el of logoContainers){\n        const $el = $(el);\n        // inline svg inside\n        const svg = $el.find(\"svg\").first();\n        if (svg && svg.length) {\n            // grab outer HTML\n            const html = $.html(svg);\n            if (html) return {\n                svg: html\n            };\n        }\n        // image tag inside\n        const img = $el.find(\"img\").first();\n        if (img && img.length) {\n            let src = img.attr(\"src\") || img.attr(\"data-src\") || \"\";\n            src = absoluteUrl(base, src);\n            if (src) return {\n                url: src\n            };\n        }\n    }\n    // fallback: simple img with alt/class containing logo\n    const cand = $('img[alt*=\"logo\" i], img[class*=\"logo\" i]').first();\n    const fallback = cand.attr(\"src\") || cand.attr(\"data-src\") || \"\";\n    if (fallback) return {\n        url: absoluteUrl(base, fallback)\n    };\n    return {};\n}\nasync function handler(req, res) {\n    const { url } = req.query;\n    if (!url || typeof url !== \"string\") {\n        res.status(400).json({\n            error: \"Missing url parameter\"\n        });\n        return;\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n            maxRedirects: 5,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0\"\n            }\n        });\n        const html = response.data;\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n        // Remove mega-menu content globally before extraction\n        try {\n            const reMega = /mega[-_ ]?menu/i;\n            const toRemove = $(\"[class]\").filter((_, el)=>reMega.test($(el).attr(\"class\") || \"\")).toArray();\n            if (toRemove.length) $(toRemove).remove();\n        } catch (_) {}\n        const base = new URL(url).toString();\n        const product = await (0,_lib_parser__WEBPACK_IMPORTED_MODULE_2__.parseProduct)(url);\n        const storeName = extractStoreName($, url);\n        const logoObj = extractLogo($, url);\n        const heroImages = collectImages($, base, \"hero\");\n        // Prefer mobile-banner images on current page; then also try homepage and merge/dedupe\n        let bannerImages = collectMobileBannerImages($, base);\n        try {\n            const origin = new URL(base).origin;\n            const homeRes = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(origin, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0\"\n                },\n                maxRedirects: 5\n            });\n            const $home = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(homeRes.data);\n            const homeBanners = collectMobileBannerImages($home, origin + \"/\");\n            bannerImages = Array.from(new Set([\n                ...bannerImages,\n                ...homeBanners\n            ]));\n        } catch (_) {\n        // ignore homepage fetch errors\n        }\n        if (bannerImages.length === 0) {\n            bannerImages = collectImages($, base, \"banner\");\n        }\n        const { candidates: colorCandidates, primary: primaryColor, text: textColor } = extractPrimaryAndText($);\n        // Extract announcement copy text if present\n        let announcementCopy = \"\";\n        const ann = $('[class*=\"announcement\" i], [class*=\"anouncement\" i]').first();\n        if (ann && ann.length) {\n            announcementCopy = (ann.text() || \"\").replace(/\\s+/g, \" \").trim();\n        }\n        const fontFamilies = extractFonts($);\n        const payload = {\n            storeName,\n            logo: logoObj.url,\n            logoSvg: logoObj.svg,\n            heroImages,\n            bannerImages,\n            colorScheme: primaryColor ? [\n                primaryColor\n            ] : [],\n            primaryColor,\n            textColor,\n            colorCandidates: colorCandidates,\n            fontFamilies,\n            announcementCopy,\n            product\n        };\n        res.status(200).json(payload);\n    } catch (err) {\n        console.error(\"Analyze error\", err.message || err);\n        res.status(500).json({\n            error: \"Failed to analyze page\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/analyze.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();