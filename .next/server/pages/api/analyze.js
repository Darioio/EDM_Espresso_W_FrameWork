"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analyze";
exports.ids = ["pages/api/analyze"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "cheerio":
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ ((module) => {

module.exports = import("cheerio");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/analyze.ts */ \"(api)/./pages/api/analyze.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analyze\",\n        pathname: \"/api/analyze\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFuYWx5emUmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmFuYWx5emUudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUQ7QUFDbkQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZG0tYnVpbGRlci8/YzRkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2FuYWx5emUudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/parser.ts":
/*!***********************!*\
  !*** ./lib/parser.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseProduct: () => (/* binding */ parseProduct)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"cheerio\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__]);\n([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n/**\n * Shape of the information we care about from a product page.\n *\n * These fields mirror the placeholders used in templates. Some\n * fields are optional because not every page will expose them.\n */ // ProductData type moved to lib/types.ts\n/**\n * Attempt to parse structured JSON-LD data from the page. Many\n * eâ€‘commerce platforms embed an object with the schema.org\n * Product type. This helper extracts it if present.\n */ function parseLdJson($) {\n    const scripts = $('script[type=\"application/ld+json\"]').toArray();\n    for (const el of scripts){\n        const contents = $(el).contents().text();\n        if (!contents) continue;\n        try {\n            const json = JSON.parse(contents.trim());\n            // Sometimes multiple objects are wrapped in an array.\n            const candidates = Array.isArray(json) ? json : [\n                json\n            ];\n            for (const obj of candidates){\n                if (obj[\"@type\"] === \"Product\") {\n                    return obj;\n                }\n            }\n        } catch (_) {\n        // ignore JSON parse errors and continue.\n        }\n    }\n    return null;\n}\n/**\n * Generic helper to extract a meta tag value. It first tries to\n * match the given property on the `meta[property]` attribute (as used\n * by Open Graph), then falls back to `meta[name]`.\n */ function getMeta($, prop) {\n    return $(`meta[property='${prop}']`).attr(\"content\") || $(`meta[name='${prop}']`).attr(\"content\") || null;\n}\n/**\n * Fetch a product page and extract basic fields using heuristics. This\n * function does not attempt to deeply crawl the DOM; instead it relies\n * on Open Graph tags, JSONâ€‘LD and common microdata attributes. If a\n * field cannot be resolved it will be returned as an empty string.\n *\n * If the request fails for whatever reason the resulting object will\n * contain empty strings for all properties except url and cta.\n *\n * @param url Product page URL\n */ // Rotating modern user agents for retry strategy\nconst USER_AGENTS = [\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36\"\n];\nasync function fetchWithRetries(url, max = 3) {\n    let lastErr;\n    for(let attempt = 1; attempt <= max; attempt++){\n        const ua = USER_AGENTS[(attempt - 1) % USER_AGENTS.length];\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n                headers: {\n                    \"User-Agent\": ua,\n                    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n                    \"Accept-Language\": \"en-US,en;q=0.9\",\n                    \"Cache-Control\": \"no-cache\",\n                    \"Pragma\": \"no-cache\",\n                    \"Referer\": new URL(url).origin + \"/\"\n                },\n                maxRedirects: 5,\n                timeout: 12000,\n                validateStatus: (s)=>s < 500 || s === 503 || s === 429\n            });\n            if (res.status === 200) return {\n                html: res.data,\n                status: res.status\n            };\n            if ([\n                429,\n                403,\n                503\n            ].includes(res.status) && attempt < max) {\n                await new Promise((r)=>setTimeout(r, 350 * Math.pow(2, attempt - 1)));\n                continue;\n            }\n            return {\n                html: res.data,\n                status: res.status\n            };\n        } catch (e) {\n            lastErr = e;\n            if (attempt === max) throw e;\n            await new Promise((r)=>setTimeout(r, 350 * Math.pow(2, attempt - 1)));\n        }\n    }\n    throw lastErr;\n}\nasync function parseProduct(url) {\n    const clean = (value)=>(value || \"\").toString().trim();\n    // Normalise image URLs (protocol-relative, root-relative, and relative paths)\n    const buildNormaliser = (pageUrl)=>{\n        let origin = \"\";\n        let basePath = \"\";\n        try {\n            const u = new URL(pageUrl);\n            origin = u.origin;\n            basePath = pageUrl.endsWith(\"/\") ? pageUrl : pageUrl.substring(0, pageUrl.lastIndexOf(\"/\") + 1);\n        } catch (_) {}\n        return (raw)=>{\n            const val = (raw || \"\").trim();\n            if (!val) return \"\";\n            if (/^https?:\\/\\//i.test(val)) return val;\n            if (val.startsWith(\"//\")) return `https:${val}`; // assume https for protocol-relative\n            if (val.startsWith(\"/\")) return origin ? origin + val : val; // root-relative\n            return basePath ? basePath + val : val; // relative path\n        };\n    };\n    const normalise = buildNormaliser(url);\n    let html = \"\";\n    let status = 0;\n    try {\n        const fetched = await fetchWithRetries(url, 3);\n        html = fetched.html;\n        status = fetched.status;\n    } catch (error) {\n        console.error(`Failed to fetch ${url}:`, error instanceof Error ? error.message : error);\n        return {\n            url,\n            pretitle: \"\",\n            title: \"\",\n            price: \"\",\n            description: \"\",\n            image: \"\",\n            images: undefined,\n            cta: url,\n            ctaLabel: \"SHOP NOW\",\n            __fetchStatus: status || 0,\n            __reason: \"fetch-failed\"\n        };\n    }\n    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n    // Remove any mega-menu content to avoid polluting extraction\n    try {\n        const reMega = /mega[-_ ]?menu/i;\n        const toRemove = $(\"[class]\").filter((_, el)=>reMega.test($(el).attr(\"class\") || \"\")).toArray();\n        if (toRemove.length) $(toRemove).remove();\n    } catch (_) {}\n    // Attempt to parse JSONâ€‘LD structured data first because it typically\n    // provides the richest information. We fall back to meta tags if\n    // structured data is not present or incomplete.\n    const ld = parseLdJson($) || {};\n    const product = {\n        url,\n        pretitle: \"\",\n        title: \"\",\n        price: \"\",\n        originalPrice: undefined,\n        description: \"\",\n        metadataDescription: undefined,\n        image: \"\",\n        images: undefined,\n        cta: url,\n        // Default call-to-action label. Users can override this in the\n        // preview by editing the CTA text. If not provided, templates\n        // will fall back to this value.\n        ctaLabel: \"SHOP NOW\"\n    };\n    product.__fetchStatus = status;\n    // Title\n    product.title = clean(ld.name) || clean(getMeta($, \"og:title\")) || clean(getMeta($, \"twitter:title\")) || clean($(\"title\").first().text());\n    // Description & metadata description\n    // We distinguish the page's canonical META description (<meta name=\"description\">)\n    // from other potential sources like JSON-LD Product.description or Open Graph / Twitter\n    // descriptions. Per requirement: metadataDescription must originate from the meta tag only.\n    const metaTagDescription = clean(getMeta($, \"description\"));\n    const ldDesc = clean(ld.description);\n    const ogDesc = clean(getMeta($, \"og:description\"));\n    const twitterDesc = clean(getMeta($, \"twitter:description\"));\n    // Assign only the literal <meta name=\"description\"> content to metadataDescription\n    product.metadataDescription = metaTagDescription || undefined;\n    if (metaTagDescription) {\n        product.originalMetadataDescription = metaTagDescription;\n    }\n    // Default user-facing description prefers the meta tag, then structured data, then OG/Twitter.\n    product.description = metaTagDescription || ldDesc || ogDesc || twitterDesc || \"\";\n    // Extract specific description sources from .product__description\n    try {\n        const descRoot = $(\".product__description\").first();\n        if (descRoot && descRoot.length) {\n            const p = descRoot.find(\"p\").first();\n            if (p && p.length) {\n                product.descriptionP = clean(p.text());\n            }\n            const ul = descRoot.find(\"ul\").first();\n            if (ul && ul.length) {\n                // Preserve UL structure as HTML for email preview/template\n                product.descriptionUl = $.html(ul);\n            }\n        }\n    } catch (e) {\n    // ignore extraction errors\n    }\n    // Image\n    const ldImage = Array.isArray(ld.image) ? ld.image[0] : typeof ld.image === \"string\" ? ld.image : undefined;\n    // Collect possible image candidates including lazy attrs & srcset\n    const firstImg = $(\"img\").first();\n    const srcset = firstImg.attr(\"srcset\");\n    let srcsetPick = \"\";\n    if (srcset) {\n        try {\n            // choose largest descriptor\n            const parts = srcset.split(\",\").map((p)=>p.trim());\n            let bestW = -1;\n            for (const part of parts){\n                const m = part.match(/\\s+(\\d+)[wx]$/);\n                const urlPart = part.replace(/\\s+(\\d+)[wx]$/, \"\").trim();\n                const w = m ? parseInt(m[1], 10) : 0;\n                if (w > bestW) {\n                    bestW = w;\n                    srcsetPick = urlPart;\n                }\n            }\n        } catch  {}\n    }\n    product.image = normalise(clean(ldImage) || clean(getMeta($, \"og:image:secure_url\")) || clean(getMeta($, \"og:image\")) || clean(getMeta($, \"twitter:image\")) || clean(firstImg.attr(\"data-src\")) || clean(firstImg.attr(\"data-lazy\")) || clean(srcsetPick) || clean(firstImg.attr(\"src\")));\n    // Price\n    const ldOffers = ld.offers;\n    let ldPrice;\n    if (ldOffers) {\n        if (Array.isArray(ldOffers)) {\n            ldPrice = ldOffers[0]?.price;\n        } else if (typeof ldOffers === \"object\") {\n            ldPrice = ldOffers.price;\n        }\n    }\n    product.price = clean(ldPrice) || clean(getMeta($, \"product:price:amount\")) || clean(getMeta($, \"og:price:amount\")) || // Try to match microdata on sites like Shopify: [itemprop=\"price\"]\n    clean($('[itemprop=\"price\"]').first().text());\n    // Original price: attempt to find a compareâ€‘at or strikeâ€‘through price. This\n    // can appear in JSONâ€‘LD as an \"priceSpecification\" with\n    // \"priceCurrency\" and \"value\", or in the DOM as <del> or a span with\n    // class containing \"compare\" or \"strike\". We attempt several heuristics\n    // and take the first numeric value we find. The value returned does\n    // not include the currency symbol.\n    let original;\n    // Check JSONâ€‘LD offers.comparePrice if present\n    if (ldOffers) {\n        // Some schemas nest compareAtPrice or originalPrice\n        const getCompare = (obj)=>{\n            if (!obj) return undefined;\n            return obj.compareAtPrice || obj.originalPrice || obj.priceSpecification?.price;\n        };\n        if (Array.isArray(ldOffers)) {\n            for (const off of ldOffers){\n                const val = getCompare(off);\n                if (val) {\n                    original = clean(val);\n                    break;\n                }\n            }\n        } else if (typeof ldOffers === \"object\") {\n            const val = getCompare(ldOffers);\n            if (val) {\n                original = clean(val);\n            }\n        }\n    }\n    if (!original) {\n        // Look for elements containing a price with a lineâ€‘through style or a\n        // class indicating \"compare\" or \"original\". We extract numeric\n        // values (digits and decimal separators).\n        const priceRegex = /([\\d,.]+)\\s*(?:[A-Z]{3})?/;\n        // helper to parse text\n        const parsePriceText = (text)=>{\n            const match = priceRegex.exec(text);\n            return match ? match[1] : undefined;\n        };\n        // Check <del> elements\n        $(\"del, strike\").each((_, el)=>{\n            const text = $(el).text();\n            const val = parsePriceText(text);\n            if (val) {\n                original = clean(val);\n                return false; // break the loop\n            }\n        });\n        // Check elements with class containing compare or original\n        if (!original) {\n            $('[class*=\"compare\"],[class*=\"original\"],[class*=\"strike\"]').each((_, el)=>{\n                const text = $(el).text();\n                const val = parsePriceText(text);\n                if (val) {\n                    original = clean(val);\n                    return false;\n                }\n            });\n        }\n    }\n    // Assign originalPrice if found and different from sale price\n    if (original && original !== product.price) {\n        product.originalPrice = original;\n    }\n    // Pretitle: not widely available. As a heuristic, if the title\n    // contains a hyphen, split the first part as pretitle and the rest\n    // as the actual title.\n    if (product.title && product.title.includes(\" â€“ \")) {\n        const parts = product.title.split(/\\s+â€“\\s+/);\n        if (parts.length > 1) {\n            product.pretitle = parts[0];\n            product.title = parts.slice(1).join(\" â€“ \");\n        }\n    }\n    // Colour capture removed per refactor; no swatch detection\n    // Images: collect additional image URLs beyond the primary image. We\n    // start with the primary image if it exists. Then search for image\n    // elements that are likely part of the product gallery. Heuristics\n    // include class names containing \"product\", \"gallery\", \"thumb\", or\n    // \"image\". We also accept JSONâ€‘LD image arrays. Only absolute\n    // URLs (http or https) are kept and duplicates removed.\n    const imageSet = new Set();\n    if (product.image) {\n        imageSet.add(product.image);\n    }\n    // Add any additional images from JSONâ€‘LD\n    if (Array.isArray(ld.image)) {\n        for (const img of ld.image){\n            if (typeof img === \"string\") {\n                imageSet.add(normalise(img));\n            }\n        }\n    }\n    // DOM extraction: find images with relevant class hints\n    $(\"img\").each((_, el)=>{\n        const src = normalise($(el).attr(\"src\"));\n        if (!src) return;\n        if (!/\\.(jpe?g|png|gif|webp|avif|svg)(?:[?#].*)?$/i.test(src)) return;\n        // Accept images if they contain certain keywords in their class or id\n        const classes = ($(el).attr(\"class\") || \"\") + \" \" + ($(el).parent().attr(\"class\") || \"\");\n        const ids = ($(el).attr(\"id\") || \"\") + \" \" + ($(el).parent().attr(\"id\") || \"\");\n        const hay = classes + \" \" + ids;\n        if (/product|gallery|thumb|image|slider|carousel/i.test(hay)) {\n            imageSet.add(src);\n        }\n    });\n    // Additional extraction: attempt to fetch the Shopify .js endpoint for\n    // richer product data. Many Shopify stores expose a JSON file at\n    // <product-url>.js which contains an array of image URLs and the\n    // featured image. If the request fails or the response is not JSON,\n    // we silently ignore it. We prefix protocol-relative URLs with\n    // https: to ensure absolute paths. Any images found here are added\n    // to imageSet. This logic mirrors the working implementation from\n    // the provided reference package. It avoids slicing the JSON by\n    // braces and instead lets JSON.parse handle the string.\n    try {\n        const jsUrl = url.endsWith(\".js\") ? url : `${url}.js`;\n        const jsResp = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(jsUrl, {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0 Safari/537.36\"\n            },\n            maxRedirects: 3\n        });\n        const jsData = jsResp.data;\n        // If response is a string, attempt to parse JSON; if it's already\n        // an object we can process it directly. Some platforms escape\n        // unicode sequences, but JSON.parse will handle them.\n        const parsedData = typeof jsData === \"string\" ? JSON.parse(jsData) : typeof jsData === \"object\" ? jsData : null;\n        if (parsedData && typeof parsedData === \"object\") {\n            // Extract images array\n            const imgs = parsedData.images;\n            if (Array.isArray(imgs)) {\n                for (const p of imgs){\n                    if (typeof p === \"string\" && p) {\n                        const imgUrl = normalise(p.startsWith(\"//\") ? `https:${p}` : p);\n                        if (imgUrl) {\n                            imageSet.add(imgUrl);\n                        }\n                    }\n                }\n            }\n            // Extract featured image\n            const feat = parsedData.featured_image;\n            if (typeof feat === \"string\" && feat) {\n                const full = normalise(feat.startsWith(\"//\") ? `https:${feat}` : feat);\n                if (full) {\n                    imageSet.add(full);\n                }\n            }\n        }\n    } catch (err) {\n    // Silently ignore errors; the JSON endpoint may not exist or may not\n    // return valid JSON. In such cases we simply rely on images\n    // extracted from the HTML and JSON-LD.\n    }\n    // Assign images array if more than one image is found\n    const imagesArr = Array.from(imageSet);\n    if (imagesArr.length > 0) {\n        // Assign the images directly from imageSet. The imageSet itself\n        // already deduplicates exact URLs while preserving insertion order.\n        // We no longer deduplicate by base path (query parameters) because\n        // some stores use the same base for different images. Instead we\n        // preserve all unique URLs. We still move the primary image to\n        // the front of the array if it exists and is not already first.\n        let deduped = imagesArr;\n        if (product.image) {\n            const index = deduped.findIndex((i)=>i === product.image);\n            if (index > 0) {\n                const [img] = deduped.splice(index, 1);\n                deduped.unshift(img);\n            } else if (index === -1) {\n                deduped.unshift(product.image);\n            }\n        }\n        product.images = deduped;\n    }\n    // If we failed structured extraction, attempt embedded script datasets (Next.js / Nuxt / etc.)\n    try {\n        if (!product.title) {\n            const nextMatch = html.match(/__NEXT_DATA__\\s*=\\s*(\\{[\\s\\S]*?\\})\\s*<\\/script>/);\n            if (nextMatch) {\n                try {\n                    const obj = JSON.parse(nextMatch[1]);\n                    const str = JSON.stringify(obj);\n                    // naive find of product title keys\n                    const titleMatch = str.match(/\"title\"\\s*:\\s*\"([^\"]{5,})\"/);\n                    if (titleMatch) product.title = clean(titleMatch[1]);\n                } catch  {}\n            }\n        }\n    } catch  {}\n    // Mark reason if nothing meaningful\n    const meaningfulKeys = [\n        \"title\",\n        \"description\",\n        \"image\",\n        \"price\",\n        \"originalPrice\",\n        \"images\",\n        \"pretitle\"\n    ];\n    const hasInfo = meaningfulKeys.some((k)=>{\n        const v = product[k];\n        return Array.isArray(v) ? v.length > 0 : Boolean(v && String(v).trim());\n    });\n    if (!hasInfo) {\n        product.__reason = product.__reason || (product.__fetchStatus && [\n            403,\n            429\n        ].includes(product.__fetchStatus) ? \"blocked\" : \"empty\");\n    }\n    return product;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/parser.ts\n");

/***/ }),

/***/ "(api)/./pages/api/analyze.ts":
/*!******************************!*\
  !*** ./pages/api/analyze.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"cheerio\");\n/* harmony import */ var _lib_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/parser */ \"(api)/./lib/parser.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__, _lib_parser__WEBPACK_IMPORTED_MODULE_2__]);\n([axios__WEBPACK_IMPORTED_MODULE_0__, cheerio__WEBPACK_IMPORTED_MODULE_1__, _lib_parser__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nfunction absoluteUrl(base, url) {\n    if (!url) return \"\";\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) return url;\n    if (url.startsWith(\"//\")) return \"https:\" + url;\n    if (url.startsWith(\"/\")) return new URL(base).origin + url;\n    try {\n        return new URL(url, base).toString();\n    } catch  {\n        return url;\n    }\n}\nfunction rgbToHex(input) {\n    // supports rgb(a) like rgb(255,0,0) or rgba(255,0,0,1)\n    const m = input.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})/i);\n    if (!m) return null;\n    const r = Math.max(0, Math.min(255, parseInt(m[1], 10)));\n    const g = Math.max(0, Math.min(255, parseInt(m[2], 10)));\n    const b = Math.max(0, Math.min(255, parseInt(m[3], 10)));\n    const toHex = (n)=>n.toString(16).padStart(2, \"0\").toUpperCase();\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\nfunction normalizeColor(val) {\n    if (!val) return null;\n    const cleaned = val.trim().replace(/!important/i, \"\").trim();\n    if (/^var\\(/i.test(cleaned)) return null;\n    if (/^transparent$/i.test(cleaned)) return null;\n    if (/^currentColor$/i.test(cleaned)) return null;\n    // hex\n    const hex = cleaned.match(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i)?.[0];\n    if (hex) return hex.toUpperCase();\n    // rgb/rgba\n    const asHex = rgbToHex(cleaned);\n    if (asHex) return asHex;\n    return null;\n}\n// Extract color candidates from CSS and inline styles for announcement bars and CTAs\nfunction extractColorCandidates($, baseCssTexts) {\n    const candidates = [];\n    const push = (source, color)=>{\n        const c = color && normalizeColor(color);\n        if (!c) return;\n        candidates.push({\n            source,\n            color: c\n        });\n    };\n    // From inline styles of announcement elements\n    $('[class*=\"announcement\" i], [class*=\"anouncement\" i]').each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"announcement-bg\", mBg[1]);\n        const mBorder = style.match(/border(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBorder) push(\"announcement-border\", mBorder[1]);\n    });\n    // Utility bar backgrounds\n    $('.utility-bar, [class*=\"utility-bar\" i]').each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"utility-bar-bg\", mBg[1]);\n    });\n    // From inline styles of CTA-like elements\n    $('[class*=\"cta\" i], [class*=\"button\" i], [class*=\"btn\" i], [class*=\"add-to-cart\" i]').each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"cta-bg\", mBg[1]);\n        const mBorder = style.match(/border(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBorder) push(\"cta-border\", mBorder[1]);\n    });\n    // Explicit <button> elements\n    $(\"button\").each((_, el)=>{\n        const style = ($(el).attr(\"style\") || \"\").toString();\n        const mBg = style.match(/background(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBg) push(\"button-bg\", mBg[1]);\n        const mBorder = style.match(/border(?:-color)?\\s*:\\s*([^;]+)/i);\n        if (mBorder) push(\"button-border\", mBorder[1]);\n    });\n    // Scan style tags for rules targeting announcement/cta classes\n    for (const css of baseCssTexts){\n        // announcement backgrounds\n        const reAnn = /\\.(?:[^\\.{\\s]*?(announcement|anouncement)[^\\s{]*)[^}]*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        let m;\n        while(m = reAnn.exec(css)){\n            push(\"announcement-bg\", m[2]);\n        }\n        // cta backgrounds\n        const reCtaBg = /\\.(?:[^\\.{\\s]*?(cta|button|btn)[^\\s{]*)[^}]*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reCtaBg.exec(css)){\n            push(\"cta-bg\", m[2]);\n        }\n        // cta borders\n        const reCtaBorder = /\\.(?:[^\\.{\\s]*?(cta|button|btn)[^\\s{]*)[^}]*\\{[^}]*?(border(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reCtaBorder.exec(css)){\n            push(\"cta-border\", m[2]);\n        }\n        // utility bar background\n        const reUtil = /\\.(?:[^\\.\\{\\s]*?(utility-bar)[^\\s{]*)[^}]*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reUtil.exec(css)){\n            push(\"utility-bar-bg\", m[2]);\n        }\n        // button tag styles\n        const reButtonTag = /button\\s*\\{[^}]*?(background(?:-color)?):\\s*([^;}{]+);/ig;\n        while(m = reButtonTag.exec(css)){\n            push(\"button-bg\", m[1] || m[2]);\n        }\n    }\n    // Dedupe by color while preserving first occurrence\n    const seen = new Set();\n    return candidates.filter(({ color })=>seen.has(color) ? false : (seen.add(color), true));\n}\n// Extract --atlas-primary-color; fall back to meta theme-color\nfunction extractPrimaryAndText($) {\n    const styles = [];\n    $(\"style\").each((_, el)=>{\n        styles.push($(el).contents().text());\n    });\n    let primary = null;\n    for (const text of styles){\n        const m = text.match(/--atlas-primary-color\\s*:\\s*([^;\\n\\r]+)/i);\n        if (m && m[1]) {\n            primary = normalizeColor(m[1]);\n            if (primary) break;\n        }\n    }\n    const candidates = extractColorCandidates($, styles);\n    // theme-color as a low-priority candidate\n    const theme = $('meta[name=\"theme-color\"]').attr(\"content\");\n    const themeHex = theme ? normalizeColor(theme) : null;\n    if (themeHex) candidates.push({\n        source: \"theme-color\",\n        color: themeHex\n    });\n    // prefer atlas var, else announcement bg, cta bg, cta border, then theme\n    const preferred = primary || candidates[0]?.color || null;\n    // pick text color suggestion\n    let text = \"black\";\n    const hex = preferred || candidates[0]?.color || themeHex;\n    if (hex) {\n        // YIQ formula\n        const r = parseInt(hex.substring(1, 3), 16);\n        const g = parseInt(hex.substring(3, 5), 16);\n        const b = parseInt(hex.substring(5, 7), 16);\n        const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n        text = yiq >= 128 ? \"black\" : \"white\";\n    }\n    return {\n        candidates,\n        primary: preferred || undefined,\n        text\n    };\n}\nfunction extractFonts($) {\n    const set = new Set();\n    $('link[rel=\"stylesheet\"][href*=\"fonts.googleapis.com\"]').each((_, el)=>{\n        const href = $(el).attr(\"href\") || \"\";\n        const url = new URL(href, \"https://example.com\");\n        const fam = url.searchParams.get(\"family\");\n        if (fam) {\n            fam.split(\"|\").forEach((chunk)=>set.add(chunk.split(\":\")[0].replace(/\\+/g, \" \")));\n        }\n    });\n    $(\"style\").each((_, el)=>{\n        const text = $(el).contents().text();\n        const matches = text.match(/font-family\\s*:\\s*([^;\\}]+)/gi) || [];\n        matches.forEach((m)=>{\n            const fam = m.split(\":\")[1]?.trim().replace(/[\"']/g, \"\").split(\",\")[0]?.trim();\n            if (fam) set.add(fam);\n        });\n    });\n    const blocked = new Set([\n        \"sans-serif\",\n        \"serif\",\n        \"monospace\",\n        \"cursive\",\n        \"fantasy\",\n        \"emoji\",\n        \"math\",\n        \"fangsong\",\n        \"system-ui\",\n        \"inherit\",\n        \"initial\",\n        \"unset\"\n    ]);\n    const cleaned = Array.from(set).filter((f)=>f && !/^var\\(/i.test(f) && !/^--/.test(f) && !blocked.has(f.toLowerCase())).slice(0, 5);\n    return cleaned;\n}\nfunction collectImages($, base, type) {\n    const results = [];\n    const regex = type === \"hero\" ? /(main|slideshow|hero|header)/i : /(banner)/i;\n    $(\"img\").each((_, el)=>{\n        const $el = $(el);\n        const cls = ($el.attr(\"class\") || \"\") + \" \" + ($el.parent().attr(\"class\") || \"\");\n        const id = ($el.attr(\"id\") || \"\") + \" \" + ($el.parent().attr(\"id\") || \"\");\n        if (!regex.test(cls + \" \" + id)) return;\n        let src = $el.attr(\"src\") || $el.attr(\"data-src\") || \"\";\n        src = absoluteUrl(base, src);\n        if (!src) return;\n        // width heuristic: attribute width or src hints like _600x\n        const wAttr = parseInt($el.attr(\"width\") || \"0\", 10);\n        const okByAttr = !isNaN(wAttr) && wAttr >= 599;\n        const okBySrc = /[_-](6\\d\\d|[7-9]\\d\\d|\\d{4,})x/i.test(src) || /w(=|%3D)(6\\d\\d|[7-9]\\d\\d|\\d{4,})/i.test(src);\n        if (okByAttr || okBySrc) {\n            results.push(src);\n        }\n    });\n    // Dedupe preserving order\n    return Array.from(new Set(results));\n}\nfunction collectMobileBannerImages($, base) {\n    const results = [];\n    // direct class on img\n    $('img.mobile-banner, img[class*=\"mobile-banner\"]').each((_, el)=>{\n        let src = $(el).attr(\"src\") || $(el).attr(\"data-src\") || \"\";\n        src = absoluteUrl(base, src);\n        if (src) results.push(src);\n    });\n    // nested within elements with class mobile-banner\n    $('.mobile-banner img, [class*=\"mobile-banner\"] img').each((_, el)=>{\n        let src = $(el).attr(\"src\") || $(el).attr(\"data-src\") || \"\";\n        src = absoluteUrl(base, src);\n        if (src) results.push(src);\n    });\n    return Array.from(new Set(results));\n}\nfunction extractStoreName($, baseUrl) {\n    const og = $('meta[property=\"og:site_name\"]').attr(\"content\");\n    if (og) return og;\n    const title = $(\"title\").first().text().trim();\n    if (title) return title;\n    try {\n        const host = new URL(baseUrl).hostname.replace(/^www\\./, \"\");\n        return host.split(\".\")[0];\n    } catch  {\n        return \"\";\n    }\n}\nfunction extractLogo($, base) {\n    // search any element whose class includes 'logo'\n    const logoContainers = $('[class*=\"logo\" i]').toArray();\n    for (const el of logoContainers){\n        const $el = $(el);\n        // inline svg inside\n        const svg = $el.find(\"svg\").first();\n        if (svg && svg.length) {\n            // grab outer HTML\n            const html = $.html(svg);\n            if (html) return {\n                svg: html\n            };\n        }\n        // image tag inside\n        const img = $el.find(\"img\").first();\n        if (img && img.length) {\n            let src = img.attr(\"src\") || img.attr(\"data-src\") || \"\";\n            src = absoluteUrl(base, src);\n            if (src) return {\n                url: src\n            };\n        }\n    }\n    // fallback: simple img with alt/class containing logo\n    const cand = $('img[alt*=\"logo\" i], img[class*=\"logo\" i]').first();\n    const fallback = cand.attr(\"src\") || cand.attr(\"data-src\") || \"\";\n    if (fallback) return {\n        url: absoluteUrl(base, fallback)\n    };\n    // Deep scan: look for header region then pick an <a> linking to root with an <img>\n    try {\n        const origin = new URL(base).origin;\n        // Candidate header containers\n        const headerSelectors = [\n            \"header\",\n            '[class*=\"header\" i]',\n            '[id*=\"header\" i]',\n            \"nav\",\n            '[class*=\"topbar\" i]'\n        ];\n        const $header = $(headerSelectors.join(\",\"));\n        if ($header && $header.length) {\n            // Find image inside anchor linking to root or homepage\n            const anchors = $header.find(\"a[href]\");\n            for (const a of anchors.toArray()){\n                const $a = $(a);\n                const href = ($a.attr(\"href\") || \"\").trim();\n                if (!href) continue;\n                let absHref = href;\n                try {\n                    absHref = new URL(href, origin).toString();\n                } catch  {}\n                if (absHref === origin + \"/\" || absHref === origin) {\n                    const img = $a.find(\"img\").first();\n                    if (img && img.length) {\n                        let src = img.attr(\"src\") || img.attr(\"data-src\") || img.attr(\"data-lazy\") || \"\";\n                        src = absoluteUrl(base, src);\n                        if (src) return {\n                            url: src\n                        };\n                    }\n                    const svg = $a.find(\"svg\").first();\n                    if (svg && svg.length) {\n                        const html = $.html(svg);\n                        if (html) return {\n                            svg: html\n                        };\n                    }\n                }\n            }\n        }\n    } catch  {}\n    // Heuristic: largest image near top of body within first 10 images (often the logo if above fails)\n    try {\n        const imgs = $(\"img\").slice(0, 10).toArray();\n        // Using 'any' for node reference to avoid tight coupling to cheerio internal types across versions\n        let best = null;\n        for (const el of imgs){\n            const $img = $(el);\n            let src = $img.attr(\"src\") || $img.attr(\"data-src\") || \"\";\n            if (!src) continue;\n            src = absoluteUrl(base, src);\n            // Skip tracking pixels / sprites\n            if (/\\.gif$/i.test(src) || /sprite/i.test(src) || /loading|placeholder/i.test(src)) continue;\n            const w = parseInt($img.attr(\"width\") || \"0\", 10);\n            const h = parseInt($img.attr(\"height\") || \"0\", 10);\n            const area = isNaN(w) || isNaN(h) ? 0 : w * h;\n            // Penalize huge banner-like images (very wide and tall)\n            const penalty = w > 800 && h > 300 ? 0.2 : 1;\n            const score = (area || 0) * penalty;\n            if (!best || score > best.score) best = {\n                el,\n                score,\n                src\n            };\n        }\n        if (best && best.src) return {\n            url: best.src\n        };\n    } catch  {}\n    return {};\n}\nasync function handler(req, res) {\n    const { url } = req.query;\n    if (!url || typeof url !== \"string\") {\n        res.status(400).json({\n            error: \"Missing url parameter\"\n        });\n        return;\n    }\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n            maxRedirects: 5,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0\"\n            }\n        });\n        const html = response.data;\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n        // Remove mega-menu content globally before extraction\n        try {\n            const reMega = /mega[-_ ]?menu/i;\n            const toRemove = $(\"[class]\").filter((_, el)=>reMega.test($(el).attr(\"class\") || \"\")).toArray();\n            if (toRemove.length) $(toRemove).remove();\n        } catch (_) {}\n        const base = new URL(url).toString();\n        const product = await (0,_lib_parser__WEBPACK_IMPORTED_MODULE_2__.parseProduct)(url);\n        const storeName = extractStoreName($, url);\n        const logoObj = extractLogo($, url);\n        const heroImages = collectImages($, base, \"hero\");\n        // Prefer mobile-banner images on current page; then also try homepage and merge/dedupe\n        let bannerImages = collectMobileBannerImages($, base);\n        try {\n            const origin = new URL(base).origin;\n            const homeRes = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(origin, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0\"\n                },\n                maxRedirects: 5\n            });\n            const $home = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(homeRes.data);\n            const homeBanners = collectMobileBannerImages($home, origin + \"/\");\n            bannerImages = Array.from(new Set([\n                ...bannerImages,\n                ...homeBanners\n            ]));\n        } catch (_) {\n        // ignore homepage fetch errors\n        }\n        if (bannerImages.length === 0) {\n            bannerImages = collectImages($, base, \"banner\");\n        }\n        const { candidates: colorCandidates, primary: primaryColor, text: textColor } = extractPrimaryAndText($);\n        // Extract announcement copy text if present\n        let announcementCopy = \"\";\n        const ann = $('[class*=\"announcement\" i], [class*=\"anouncement\" i]').first();\n        if (ann && ann.length) {\n            announcementCopy = (ann.text() || \"\").replace(/\\s+/g, \" \").trim();\n        }\n        const fontFamilies = extractFonts($);\n        const payload = {\n            storeName,\n            logo: logoObj.url,\n            logoSvg: logoObj.svg,\n            heroImages,\n            bannerImages,\n            colorScheme: primaryColor ? [\n                primaryColor\n            ] : [],\n            primaryColor,\n            textColor,\n            colorCandidates: colorCandidates,\n            fontFamilies,\n            announcementCopy,\n            product\n        };\n        res.status(200).json(payload);\n    } catch (err) {\n        console.error(\"Analyze error\", err.message || err);\n        res.status(500).json({\n            error: \"Failed to analyze page\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBSWdHO21CQUFpQkc7YUFBWTtRQUNyRSxFQUFFLE9BQU9qSCxHQUFHO1FBQ1YsK0JBQStCO1FBQ2pDO1FBQ0EsSUFBSThHLGFBQWF2QyxNQUFNLEtBQUssR0FBRztZQUM3QnVDLGVBQWVqRSxjQUFjckQsR0FBRzlCLE1BQU07UUFDeEM7UUFDQSxNQUFNLEVBQUVnQyxZQUFZd0gsZUFBZSxFQUFFNUYsU0FBUzZGLFlBQVksRUFBRTlGLE1BQU0rRixTQUFTLEVBQUUsR0FBR2xHLHNCQUFzQjFCO1FBQ3RHLDRDQUE0QztRQUM1QyxJQUFJNkgsbUJBQW1CO1FBQ3ZCLE1BQU1DLE1BQU05SCxFQUFFLHVEQUF1RHVFLEtBQUs7UUFDMUUsSUFBSXVELE9BQU9BLElBQUkvQyxNQUFNLEVBQUU7WUFDckI4QyxtQkFBbUIsQ0FBQ0MsSUFBSWpHLElBQUksTUFBTSxFQUFDLEVBQUdsQyxPQUFPLENBQUMsUUFBTyxLQUFLRCxJQUFJO1FBQ2hFO1FBQ0EsTUFBTXFJLGVBQWUxRixhQUFhckM7UUFFbEMsTUFBTWdJLFVBQTJCO1lBQy9CYjtZQUNBYyxNQUFNYixRQUFRakosR0FBRztZQUNqQitKLFNBQVNkLFFBQVF2QyxHQUFHO1lBQ3BCd0M7WUFDQUM7WUFDQWEsYUFBYVIsZUFBZTtnQkFBQ0E7YUFBYSxHQUFHLEVBQUU7WUFDL0NBO1lBQ0FDO1lBQ0FGLGlCQUFpQkE7WUFDakJLO1lBQ0FGO1lBQ0FYO1FBQ0Y7UUFDQWIsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ3dCO0lBQ3ZCLEVBQUUsT0FBT0ksS0FBVTtRQUNqQkMsUUFBUTVCLEtBQUssQ0FBQyxpQkFBaUIyQixJQUFJRSxPQUFPLElBQUlGO1FBQzlDL0IsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQXlCO0lBQ3pEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZG0tYnVpbGRlci8uL3BhZ2VzL2FwaS9hbmFseXplLnRzPzhiMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tICdjaGVlcmlvJztcbmltcG9ydCB7IHBhcnNlUHJvZHVjdCB9IGZyb20gJy4uLy4uL2xpYi9wYXJzZXInO1xuXG50eXBlIEFuYWx5emVSZXNwb25zZSA9IHtcbiAgc3RvcmVOYW1lOiBzdHJpbmc7XG4gIGxvZ28/OiBzdHJpbmc7IC8vIGltYWdlIFVSTCBpZiBhdmFpbGFibGVcbiAgbG9nb1N2Zz86IHN0cmluZzsgLy8gaW5saW5lIFNWRyBtYXJrdXAgaWYgYXZhaWxhYmxlXG4gIGhlcm9JbWFnZXM6IHN0cmluZ1tdO1xuICBiYW5uZXJJbWFnZXM6IHN0cmluZ1tdO1xuICAvLyBEZXByZWNhdGVkOiB1c2UgcHJpbWFyeUNvbG9yL3RleHRDb2xvcjsga2VlcCBmb3IgYmFja3dhcmQgY29tcGF0XG4gIGNvbG9yU2NoZW1lPzogc3RyaW5nW107IC8vIFtwcmltYXJ5XVxuICBwcmltYXJ5Q29sb3I/OiBzdHJpbmc7XG4gIHRleHRDb2xvcj86ICdibGFjaycgfCAnd2hpdGUnO1xuICBjb2xvckNhbmRpZGF0ZXM/OiB7IHNvdXJjZTogc3RyaW5nOyBjb2xvcjogc3RyaW5nIH1bXTtcbiAgZm9udEZhbWlsaWVzOiBzdHJpbmdbXTtcbiAgYW5ub3VuY2VtZW50Q29weT86IHN0cmluZztcbiAgcHJvZHVjdDogYW55OyAvLyByZXVzZSBQcm9kdWN0RGF0YSBzaGFwZSBmcm9tIGxpYi90eXBlcyBvbiBjbGllbnRcbn07XG5cbmZ1bmN0aW9uIGFic29sdXRlVXJsKGJhc2U6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIXVybCkgcmV0dXJuICcnO1xuICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSkgcmV0dXJuIHVybDtcbiAgaWYgKHVybC5zdGFydHNXaXRoKCcvLycpKSByZXR1cm4gJ2h0dHBzOicgKyB1cmw7XG4gIGlmICh1cmwuc3RhcnRzV2l0aCgnLycpKSByZXR1cm4gbmV3IFVSTChiYXNlKS5vcmlnaW4gKyB1cmw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwodXJsLCBiYXNlKS50b1N0cmluZygpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJnYlRvSGV4KGlucHV0OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgLy8gc3VwcG9ydHMgcmdiKGEpIGxpa2UgcmdiKDI1NSwwLDApIG9yIHJnYmEoMjU1LDAsMCwxKVxuICBjb25zdCBtID0gaW5wdXQubWF0Y2goL3JnYmE/XFwoXFxzKihcXGR7MSwzfSlcXHMqLFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KS9pKTtcbiAgaWYgKCFtKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcGFyc2VJbnQobVsxXSwgMTApKSk7XG4gIGNvbnN0IGcgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIHBhcnNlSW50KG1bMl0sIDEwKSkpO1xuICBjb25zdCBiID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBwYXJzZUludChtWzNdLCAxMCkpKTtcbiAgY29uc3QgdG9IZXggPSAobjogbnVtYmVyKSA9PiBuLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiBgIyR7dG9IZXgocil9JHt0b0hleChnKX0ke3RvSGV4KGIpfWA7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbG9yKHZhbDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gIGlmICghdmFsKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgY2xlYW5lZCA9IHZhbC50cmltKCkucmVwbGFjZSgvIWltcG9ydGFudC9pLCAnJykudHJpbSgpO1xuICBpZiAoL152YXJcXCgvaS50ZXN0KGNsZWFuZWQpKSByZXR1cm4gbnVsbDtcbiAgaWYgKC9edHJhbnNwYXJlbnQkL2kudGVzdChjbGVhbmVkKSkgcmV0dXJuIG51bGw7XG4gIGlmICgvXmN1cnJlbnRDb2xvciQvaS50ZXN0KGNsZWFuZWQpKSByZXR1cm4gbnVsbDtcbiAgLy8gaGV4XG4gIGNvbnN0IGhleCA9IGNsZWFuZWQubWF0Y2goL14jKFswLTlhLWZdezN9fFswLTlhLWZdezZ9KSQvaSk/LlswXTtcbiAgaWYgKGhleCkgcmV0dXJuIGhleC50b1VwcGVyQ2FzZSgpO1xuICAvLyByZ2IvcmdiYVxuICBjb25zdCBhc0hleCA9IHJnYlRvSGV4KGNsZWFuZWQpO1xuICBpZiAoYXNIZXgpIHJldHVybiBhc0hleDtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIEV4dHJhY3QgY29sb3IgY2FuZGlkYXRlcyBmcm9tIENTUyBhbmQgaW5saW5lIHN0eWxlcyBmb3IgYW5ub3VuY2VtZW50IGJhcnMgYW5kIENUQXNcbmZ1bmN0aW9uIGV4dHJhY3RDb2xvckNhbmRpZGF0ZXMoJDogY2hlZXJpby5DaGVlcmlvQVBJLCBiYXNlQ3NzVGV4dHM6IHN0cmluZ1tdKTogeyBzb3VyY2U6IHN0cmluZzsgY29sb3I6IHN0cmluZyB9W10ge1xuICBjb25zdCBjYW5kaWRhdGVzOiB7IHNvdXJjZTogc3RyaW5nOyBjb2xvcjogc3RyaW5nIH1bXSA9IFtdO1xuICBjb25zdCBwdXNoID0gKHNvdXJjZTogc3RyaW5nLCBjb2xvcj86IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICBjb25zdCBjID0gY29sb3IgJiYgbm9ybWFsaXplQ29sb3IoY29sb3IpO1xuICAgIGlmICghYykgcmV0dXJuO1xuICAgIGNhbmRpZGF0ZXMucHVzaCh7IHNvdXJjZSwgY29sb3I6IGMgfSk7XG4gIH07XG4gIC8vIEZyb20gaW5saW5lIHN0eWxlcyBvZiBhbm5vdW5jZW1lbnQgZWxlbWVudHNcbiAgJCgnW2NsYXNzKj1cImFubm91bmNlbWVudFwiIGldLCBbY2xhc3MqPVwiYW5vdW5jZW1lbnRcIiBpXScpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgY29uc3Qgc3R5bGUgPSAoJChlbCkuYXR0cignc3R5bGUnKSB8fCAnJykudG9TdHJpbmcoKTtcbiAgICBjb25zdCBtQmcgPSBzdHlsZS5tYXRjaCgvYmFja2dyb3VuZCg/Oi1jb2xvcik/XFxzKjpcXHMqKFteO10rKS9pKTtcbiAgICBpZiAobUJnKSBwdXNoKCdhbm5vdW5jZW1lbnQtYmcnLCBtQmdbMV0pO1xuICAgIGNvbnN0IG1Cb3JkZXIgPSBzdHlsZS5tYXRjaCgvYm9yZGVyKD86LWNvbG9yKT9cXHMqOlxccyooW147XSspL2kpO1xuICAgIGlmIChtQm9yZGVyKSBwdXNoKCdhbm5vdW5jZW1lbnQtYm9yZGVyJywgbUJvcmRlclsxXSk7XG4gIH0pO1xuICAvLyBVdGlsaXR5IGJhciBiYWNrZ3JvdW5kc1xuICAkKCcudXRpbGl0eS1iYXIsIFtjbGFzcyo9XCJ1dGlsaXR5LWJhclwiIGldJykuZWFjaCgoXywgZWwpID0+IHtcbiAgICBjb25zdCBzdHlsZSA9ICgkKGVsKS5hdHRyKCdzdHlsZScpIHx8ICcnKS50b1N0cmluZygpO1xuICAgIGNvbnN0IG1CZyA9IHN0eWxlLm1hdGNoKC9iYWNrZ3JvdW5kKD86LWNvbG9yKT9cXHMqOlxccyooW147XSspL2kpO1xuICAgIGlmIChtQmcpIHB1c2goJ3V0aWxpdHktYmFyLWJnJywgbUJnWzFdKTtcbiAgfSk7XG4gIC8vIEZyb20gaW5saW5lIHN0eWxlcyBvZiBDVEEtbGlrZSBlbGVtZW50c1xuICAkKCdbY2xhc3MqPVwiY3RhXCIgaV0sIFtjbGFzcyo9XCJidXR0b25cIiBpXSwgW2NsYXNzKj1cImJ0blwiIGldLCBbY2xhc3MqPVwiYWRkLXRvLWNhcnRcIiBpXScpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgY29uc3Qgc3R5bGUgPSAoJChlbCkuYXR0cignc3R5bGUnKSB8fCAnJykudG9TdHJpbmcoKTtcbiAgICBjb25zdCBtQmcgPSBzdHlsZS5tYXRjaCgvYmFja2dyb3VuZCg/Oi1jb2xvcik/XFxzKjpcXHMqKFteO10rKS9pKTtcbiAgICBpZiAobUJnKSBwdXNoKCdjdGEtYmcnLCBtQmdbMV0pO1xuICAgIGNvbnN0IG1Cb3JkZXIgPSBzdHlsZS5tYXRjaCgvYm9yZGVyKD86LWNvbG9yKT9cXHMqOlxccyooW147XSspL2kpO1xuICAgIGlmIChtQm9yZGVyKSBwdXNoKCdjdGEtYm9yZGVyJywgbUJvcmRlclsxXSk7XG4gIH0pO1xuICAvLyBFeHBsaWNpdCA8YnV0dG9uPiBlbGVtZW50c1xuICAkKCdidXR0b24nKS5lYWNoKChfLCBlbCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlID0gKCQoZWwpLmF0dHIoJ3N0eWxlJykgfHwgJycpLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgbUJnID0gc3R5bGUubWF0Y2goL2JhY2tncm91bmQoPzotY29sb3IpP1xccyo6XFxzKihbXjtdKykvaSk7XG4gICAgaWYgKG1CZykgcHVzaCgnYnV0dG9uLWJnJywgbUJnWzFdKTtcbiAgICBjb25zdCBtQm9yZGVyID0gc3R5bGUubWF0Y2goL2JvcmRlcig/Oi1jb2xvcik/XFxzKjpcXHMqKFteO10rKS9pKTtcbiAgICBpZiAobUJvcmRlcikgcHVzaCgnYnV0dG9uLWJvcmRlcicsIG1Cb3JkZXJbMV0pO1xuICB9KTtcbiAgLy8gU2NhbiBzdHlsZSB0YWdzIGZvciBydWxlcyB0YXJnZXRpbmcgYW5ub3VuY2VtZW50L2N0YSBjbGFzc2VzXG4gIGZvciAoY29uc3QgY3NzIG9mIGJhc2VDc3NUZXh0cykge1xuICAgIC8vIGFubm91bmNlbWVudCBiYWNrZ3JvdW5kc1xuICAgIGNvbnN0IHJlQW5uID0gL1xcLig/OlteXFwue1xcc10qPyhhbm5vdW5jZW1lbnR8YW5vdW5jZW1lbnQpW15cXHN7XSopW159XSpcXHtbXn1dKj8oYmFja2dyb3VuZCg/Oi1jb2xvcik/KTpcXHMqKFteO317XSspOy9pZztcbiAgICBsZXQgbTogUmVnRXhwRXhlY0FycmF5IHwgbnVsbDtcbiAgICB3aGlsZSAoKG0gPSByZUFubi5leGVjKGNzcykpKSB7XG4gICAgICBwdXNoKCdhbm5vdW5jZW1lbnQtYmcnLCBtWzJdKTtcbiAgICB9XG4gICAgLy8gY3RhIGJhY2tncm91bmRzXG4gICAgY29uc3QgcmVDdGFCZyA9IC9cXC4oPzpbXlxcLntcXHNdKj8oY3RhfGJ1dHRvbnxidG4pW15cXHN7XSopW159XSpcXHtbXn1dKj8oYmFja2dyb3VuZCg/Oi1jb2xvcik/KTpcXHMqKFteO317XSspOy9pZztcbiAgICB3aGlsZSAoKG0gPSByZUN0YUJnLmV4ZWMoY3NzKSkpIHtcbiAgICAgIHB1c2goJ2N0YS1iZycsIG1bMl0pO1xuICAgIH1cbiAgICAvLyBjdGEgYm9yZGVyc1xuICAgIGNvbnN0IHJlQ3RhQm9yZGVyID0gL1xcLig/OlteXFwue1xcc10qPyhjdGF8YnV0dG9ufGJ0bilbXlxcc3tdKilbXn1dKlxce1tefV0qPyhib3JkZXIoPzotY29sb3IpPyk6XFxzKihbXjt9e10rKTsvaWc7XG4gICAgd2hpbGUgKChtID0gcmVDdGFCb3JkZXIuZXhlYyhjc3MpKSkge1xuICAgICAgcHVzaCgnY3RhLWJvcmRlcicsIG1bMl0pO1xuICAgIH1cbiAgICAvLyB1dGlsaXR5IGJhciBiYWNrZ3JvdW5kXG4gICAgY29uc3QgcmVVdGlsID0gL1xcLig/OlteXFwuXFx7XFxzXSo/KHV0aWxpdHktYmFyKVteXFxze10qKVtefV0qXFx7W159XSo/KGJhY2tncm91bmQoPzotY29sb3IpPyk6XFxzKihbXjt9e10rKTsvaWc7XG4gICAgd2hpbGUgKChtID0gcmVVdGlsLmV4ZWMoY3NzKSkpIHtcbiAgICAgIHB1c2goJ3V0aWxpdHktYmFyLWJnJywgbVsyXSk7XG4gICAgfVxuICAgIC8vIGJ1dHRvbiB0YWcgc3R5bGVzXG4gICAgY29uc3QgcmVCdXR0b25UYWcgPSAvYnV0dG9uXFxzKlxce1tefV0qPyhiYWNrZ3JvdW5kKD86LWNvbG9yKT8pOlxccyooW147fXtdKyk7L2lnO1xuICAgIHdoaWxlICgobSA9IHJlQnV0dG9uVGFnLmV4ZWMoY3NzKSkpIHtcbiAgICAgIHB1c2goJ2J1dHRvbi1iZycsIG1bMV0gfHwgbVsyXSk7XG4gICAgfVxuICB9XG4gIC8vIERlZHVwZSBieSBjb2xvciB3aGlsZSBwcmVzZXJ2aW5nIGZpcnN0IG9jY3VycmVuY2VcbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICByZXR1cm4gY2FuZGlkYXRlcy5maWx0ZXIoKHsgY29sb3IgfSkgPT4gKHNlZW4uaGFzKGNvbG9yKSA/IGZhbHNlIDogKHNlZW4uYWRkKGNvbG9yKSwgdHJ1ZSkpKTtcbn1cblxuLy8gRXh0cmFjdCAtLWF0bGFzLXByaW1hcnktY29sb3I7IGZhbGwgYmFjayB0byBtZXRhIHRoZW1lLWNvbG9yXG5mdW5jdGlvbiBleHRyYWN0UHJpbWFyeUFuZFRleHQoJDogY2hlZXJpby5DaGVlcmlvQVBJKTogeyBjYW5kaWRhdGVzOiB7IHNvdXJjZTogc3RyaW5nOyBjb2xvcjogc3RyaW5nIH1bXTsgcHJpbWFyeT86IHN0cmluZzsgdGV4dD86ICdibGFjaycgfCAnd2hpdGUnIH0ge1xuICBjb25zdCBzdHlsZXM6IHN0cmluZ1tdID0gW107XG4gICQoJ3N0eWxlJykuZWFjaCgoXywgZWwpID0+IHtcbiAgICBzdHlsZXMucHVzaCgkKGVsKS5jb250ZW50cygpLnRleHQoKSk7XG4gIH0pO1xuICBsZXQgcHJpbWFyeTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGZvciAoY29uc3QgdGV4dCBvZiBzdHlsZXMpIHtcbiAgICBjb25zdCBtID0gdGV4dC5tYXRjaCgvLS1hdGxhcy1wcmltYXJ5LWNvbG9yXFxzKjpcXHMqKFteO1xcblxccl0rKS9pKTtcbiAgICBpZiAobSAmJiBtWzFdKSB7XG4gICAgICBwcmltYXJ5ID0gbm9ybWFsaXplQ29sb3IobVsxXSk7XG4gICAgICBpZiAocHJpbWFyeSkgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNhbmRpZGF0ZXMgPSBleHRyYWN0Q29sb3JDYW5kaWRhdGVzKCQsIHN0eWxlcyk7XG4gIC8vIHRoZW1lLWNvbG9yIGFzIGEgbG93LXByaW9yaXR5IGNhbmRpZGF0ZVxuICBjb25zdCB0aGVtZSA9ICQoJ21ldGFbbmFtZT1cInRoZW1lLWNvbG9yXCJdJykuYXR0cignY29udGVudCcpO1xuICBjb25zdCB0aGVtZUhleCA9IHRoZW1lID8gbm9ybWFsaXplQ29sb3IodGhlbWUpIDogbnVsbDtcbiAgaWYgKHRoZW1lSGV4KSBjYW5kaWRhdGVzLnB1c2goeyBzb3VyY2U6ICd0aGVtZS1jb2xvcicsIGNvbG9yOiB0aGVtZUhleCB9KTtcbiAgLy8gcHJlZmVyIGF0bGFzIHZhciwgZWxzZSBhbm5vdW5jZW1lbnQgYmcsIGN0YSBiZywgY3RhIGJvcmRlciwgdGhlbiB0aGVtZVxuICBjb25zdCBwcmVmZXJyZWQgPSBwcmltYXJ5IHx8IChjYW5kaWRhdGVzWzBdPy5jb2xvciB8fCBudWxsKTtcbiAgLy8gcGljayB0ZXh0IGNvbG9yIHN1Z2dlc3Rpb25cbiAgbGV0IHRleHQ6ICdibGFjaycgfCAnd2hpdGUnID0gJ2JsYWNrJztcbiAgY29uc3QgaGV4ID0gcHJlZmVycmVkIHx8IGNhbmRpZGF0ZXNbMF0/LmNvbG9yIHx8IHRoZW1lSGV4O1xuICBpZiAoaGV4KSB7XG4gICAgLy8gWUlRIGZvcm11bGFcbiAgICBjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygxLCAzKSwgMTYpO1xuICAgIGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDMsIDUpLCAxNik7XG4gICAgY29uc3QgYiA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoNSwgNyksIDE2KTtcbiAgICBjb25zdCB5aXEgPSAociAqIDI5OSArIGcgKiA1ODcgKyBiICogMTE0KSAvIDEwMDA7XG4gICAgdGV4dCA9IHlpcSA+PSAxMjggPyAnYmxhY2snIDogJ3doaXRlJztcbiAgfVxuICByZXR1cm4geyBjYW5kaWRhdGVzLCBwcmltYXJ5OiBwcmVmZXJyZWQgfHwgdW5kZWZpbmVkLCB0ZXh0IH07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RGb250cygkOiBjaGVlcmlvLkNoZWVyaW9BUEkpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAkKCdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1baHJlZio9XCJmb250cy5nb29nbGVhcGlzLmNvbVwiXScpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgY29uc3QgaHJlZiA9ICQoZWwpLmF0dHIoJ2hyZWYnKSB8fCAnJztcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGhyZWYsICdodHRwczovL2V4YW1wbGUuY29tJyk7XG4gICAgY29uc3QgZmFtID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2ZhbWlseScpO1xuICAgIGlmIChmYW0pIHtcbiAgICAgIGZhbS5zcGxpdCgnfCcpLmZvckVhY2goKGNodW5rKSA9PiBzZXQuYWRkKGNodW5rLnNwbGl0KCc6JylbMF0ucmVwbGFjZSgvXFwrL2csICcgJykpKTtcbiAgICB9XG4gIH0pO1xuICAkKCdzdHlsZScpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgY29uc3QgdGV4dCA9ICQoZWwpLmNvbnRlbnRzKCkudGV4dCgpO1xuICAgIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKC9mb250LWZhbWlseVxccyo6XFxzKihbXjtcXH1dKykvZ2kpIHx8IFtdO1xuICAgIG1hdGNoZXMuZm9yRWFjaCgobSkgPT4ge1xuICAgICAgY29uc3QgZmFtID0gbS5zcGxpdCgnOicpWzFdPy50cmltKCkucmVwbGFjZSgvW1wiJ10vZywgJycpLnNwbGl0KCcsJylbMF0/LnRyaW0oKTtcbiAgICAgIGlmIChmYW0pIHNldC5hZGQoZmFtKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGJsb2NrZWQgPSBuZXcgU2V0KFsnc2Fucy1zZXJpZicsJ3NlcmlmJywnbW9ub3NwYWNlJywnY3Vyc2l2ZScsJ2ZhbnRhc3knLCdlbW9qaScsJ21hdGgnLCdmYW5nc29uZycsJ3N5c3RlbS11aScsJ2luaGVyaXQnLCdpbml0aWFsJywndW5zZXQnXSk7XG4gIGNvbnN0IGNsZWFuZWQgPSBBcnJheS5mcm9tKHNldClcbiAgICAuZmlsdGVyKGYgPT4gZiAmJiAhL152YXJcXCgvaS50ZXN0KGYpICYmICEvXi0tLy50ZXN0KGYpICYmICFibG9ja2VkLmhhcyhmLnRvTG93ZXJDYXNlKCkpKVxuICAgIC5zbGljZSgwLCA1KTtcbiAgcmV0dXJuIGNsZWFuZWQ7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RJbWFnZXMoJDogY2hlZXJpby5DaGVlcmlvQVBJLCBiYXNlOiBzdHJpbmcsIHR5cGU6ICdoZXJvJyB8ICdiYW5uZXInKTogc3RyaW5nW10ge1xuICBjb25zdCByZXN1bHRzOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCByZWdleCA9IHR5cGUgPT09ICdoZXJvJyA/IC8obWFpbnxzbGlkZXNob3d8aGVyb3xoZWFkZXIpL2kgOiAvKGJhbm5lcikvaTtcbiAgJCgnaW1nJykuZWFjaCgoXywgZWwpID0+IHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCBjbHMgPSAoJGVsLmF0dHIoJ2NsYXNzJykgfHwgJycpICsgJyAnICsgKCRlbC5wYXJlbnQoKS5hdHRyKCdjbGFzcycpIHx8ICcnKTtcbiAgICBjb25zdCBpZCA9ICgkZWwuYXR0cignaWQnKSB8fCAnJykgKyAnICcgKyAoJGVsLnBhcmVudCgpLmF0dHIoJ2lkJykgfHwgJycpO1xuICAgIGlmICghcmVnZXgudGVzdChjbHMgKyAnICcgKyBpZCkpIHJldHVybjtcbiAgICBsZXQgc3JjID0gJGVsLmF0dHIoJ3NyYycpIHx8ICRlbC5hdHRyKCdkYXRhLXNyYycpIHx8ICcnO1xuICAgIHNyYyA9IGFic29sdXRlVXJsKGJhc2UsIHNyYyk7XG4gICAgaWYgKCFzcmMpIHJldHVybjtcbiAgICAvLyB3aWR0aCBoZXVyaXN0aWM6IGF0dHJpYnV0ZSB3aWR0aCBvciBzcmMgaGludHMgbGlrZSBfNjAweFxuICAgIGNvbnN0IHdBdHRyID0gcGFyc2VJbnQoJGVsLmF0dHIoJ3dpZHRoJykgfHwgJzAnLCAxMCk7XG4gICAgY29uc3Qgb2tCeUF0dHIgPSAhaXNOYU4od0F0dHIpICYmIHdBdHRyID49IDU5OTtcbiAgICBjb25zdCBva0J5U3JjID0gL1tfLV0oNlxcZFxcZHxbNy05XVxcZFxcZHxcXGR7NCx9KXgvaS50ZXN0KHNyYykgfHwgL3coPXwlM0QpKDZcXGRcXGR8WzctOV1cXGRcXGR8XFxkezQsfSkvaS50ZXN0KHNyYyk7XG4gICAgaWYgKG9rQnlBdHRyIHx8IG9rQnlTcmMpIHtcbiAgICAgIHJlc3VsdHMucHVzaChzcmMpO1xuICAgIH1cbiAgfSk7XG4gIC8vIERlZHVwZSBwcmVzZXJ2aW5nIG9yZGVyXG4gIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQocmVzdWx0cykpO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0TW9iaWxlQmFubmVySW1hZ2VzKCQ6IGNoZWVyaW8uQ2hlZXJpb0FQSSwgYmFzZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICBjb25zdCByZXN1bHRzOiBzdHJpbmdbXSA9IFtdO1xuICAvLyBkaXJlY3QgY2xhc3Mgb24gaW1nXG4gICQoJ2ltZy5tb2JpbGUtYmFubmVyLCBpbWdbY2xhc3MqPVwibW9iaWxlLWJhbm5lclwiXScpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgbGV0IHNyYyA9ICQoZWwpLmF0dHIoJ3NyYycpIHx8ICQoZWwpLmF0dHIoJ2RhdGEtc3JjJykgfHwgJyc7XG4gICAgc3JjID0gYWJzb2x1dGVVcmwoYmFzZSwgc3JjKTtcbiAgICBpZiAoc3JjKSByZXN1bHRzLnB1c2goc3JjKTtcbiAgfSk7XG4gIC8vIG5lc3RlZCB3aXRoaW4gZWxlbWVudHMgd2l0aCBjbGFzcyBtb2JpbGUtYmFubmVyXG4gICQoJy5tb2JpbGUtYmFubmVyIGltZywgW2NsYXNzKj1cIm1vYmlsZS1iYW5uZXJcIl0gaW1nJykuZWFjaCgoXywgZWwpID0+IHtcbiAgICBsZXQgc3JjID0gJChlbCkuYXR0cignc3JjJykgfHwgJChlbCkuYXR0cignZGF0YS1zcmMnKSB8fCAnJztcbiAgICBzcmMgPSBhYnNvbHV0ZVVybChiYXNlLCBzcmMpO1xuICAgIGlmIChzcmMpIHJlc3VsdHMucHVzaChzcmMpO1xuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChyZXN1bHRzKSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RTdG9yZU5hbWUoJDogY2hlZXJpby5DaGVlcmlvQVBJLCBiYXNlVXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBvZyA9ICQoJ21ldGFbcHJvcGVydHk9XCJvZzpzaXRlX25hbWVcIl0nKS5hdHRyKCdjb250ZW50Jyk7XG4gIGlmIChvZykgcmV0dXJuIG9nO1xuICBjb25zdCB0aXRsZSA9ICQoJ3RpdGxlJykuZmlyc3QoKS50ZXh0KCkudHJpbSgpO1xuICBpZiAodGl0bGUpIHJldHVybiB0aXRsZTtcbiAgdHJ5IHtcbiAgICBjb25zdCBob3N0ID0gbmV3IFVSTChiYXNlVXJsKS5ob3N0bmFtZS5yZXBsYWNlKC9ed3d3XFwuLywgJycpO1xuICAgIHJldHVybiBob3N0LnNwbGl0KCcuJylbMF07XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0TG9nbygkOiBjaGVlcmlvLkNoZWVyaW9BUEksIGJhc2U6IHN0cmluZyk6IHsgdXJsPzogc3RyaW5nOyBzdmc/OiBzdHJpbmcgfSB7XG4gIC8vIHNlYXJjaCBhbnkgZWxlbWVudCB3aG9zZSBjbGFzcyBpbmNsdWRlcyAnbG9nbydcbiAgY29uc3QgbG9nb0NvbnRhaW5lcnMgPSAkKCdbY2xhc3MqPVwibG9nb1wiIGldJykudG9BcnJheSgpO1xuICBmb3IgKGNvbnN0IGVsIG9mIGxvZ29Db250YWluZXJzKSB7XG4gICAgY29uc3QgJGVsID0gJChlbCBhcyBhbnkpO1xuICAgIC8vIGlubGluZSBzdmcgaW5zaWRlXG4gICAgY29uc3Qgc3ZnID0gJGVsLmZpbmQoJ3N2ZycpLmZpcnN0KCk7XG4gICAgaWYgKHN2ZyAmJiBzdmcubGVuZ3RoKSB7XG4gICAgICAvLyBncmFiIG91dGVyIEhUTUxcbiAgICAgIGNvbnN0IGh0bWwgPSAkLmh0bWwoc3ZnKTtcbiAgICAgIGlmIChodG1sKSByZXR1cm4geyBzdmc6IGh0bWwgfTtcbiAgICB9XG4gICAgLy8gaW1hZ2UgdGFnIGluc2lkZVxuICAgIGNvbnN0IGltZyA9ICRlbC5maW5kKCdpbWcnKS5maXJzdCgpO1xuICAgIGlmIChpbWcgJiYgaW1nLmxlbmd0aCkge1xuICAgICAgbGV0IHNyYyA9IGltZy5hdHRyKCdzcmMnKSB8fCBpbWcuYXR0cignZGF0YS1zcmMnKSB8fCAnJztcbiAgICAgIHNyYyA9IGFic29sdXRlVXJsKGJhc2UsIHNyYyk7XG4gICAgICBpZiAoc3JjKSByZXR1cm4geyB1cmw6IHNyYyB9O1xuICAgIH1cbiAgfVxuICAvLyBmYWxsYmFjazogc2ltcGxlIGltZyB3aXRoIGFsdC9jbGFzcyBjb250YWluaW5nIGxvZ29cbiAgY29uc3QgY2FuZCA9ICQoJ2ltZ1thbHQqPVwibG9nb1wiIGldLCBpbWdbY2xhc3MqPVwibG9nb1wiIGldJykuZmlyc3QoKTtcbiAgY29uc3QgZmFsbGJhY2sgPSBjYW5kLmF0dHIoJ3NyYycpIHx8IGNhbmQuYXR0cignZGF0YS1zcmMnKSB8fCAnJztcbiAgaWYgKGZhbGxiYWNrKSByZXR1cm4geyB1cmw6IGFic29sdXRlVXJsKGJhc2UsIGZhbGxiYWNrKSB9O1xuXG4gIC8vIERlZXAgc2NhbjogbG9vayBmb3IgaGVhZGVyIHJlZ2lvbiB0aGVuIHBpY2sgYW4gPGE+IGxpbmtpbmcgdG8gcm9vdCB3aXRoIGFuIDxpbWc+XG4gIHRyeSB7XG4gICAgY29uc3Qgb3JpZ2luID0gbmV3IFVSTChiYXNlKS5vcmlnaW47XG4gICAgLy8gQ2FuZGlkYXRlIGhlYWRlciBjb250YWluZXJzXG4gICAgY29uc3QgaGVhZGVyU2VsZWN0b3JzID0gWydoZWFkZXInLCAnW2NsYXNzKj1cImhlYWRlclwiIGldJywgJ1tpZCo9XCJoZWFkZXJcIiBpXScsICduYXYnLCAnW2NsYXNzKj1cInRvcGJhclwiIGldJ107XG4gICAgY29uc3QgJGhlYWRlciA9ICQoaGVhZGVyU2VsZWN0b3JzLmpvaW4oJywnKSk7XG4gICAgaWYgKCRoZWFkZXIgJiYgJGhlYWRlci5sZW5ndGgpIHtcbiAgICAgIC8vIEZpbmQgaW1hZ2UgaW5zaWRlIGFuY2hvciBsaW5raW5nIHRvIHJvb3Qgb3IgaG9tZXBhZ2VcbiAgICAgIGNvbnN0IGFuY2hvcnMgPSAkaGVhZGVyLmZpbmQoJ2FbaHJlZl0nKTtcbiAgICAgIGZvciAoY29uc3QgYSBvZiBhbmNob3JzLnRvQXJyYXkoKSkge1xuICAgICAgICBjb25zdCAkYSA9ICQoYSk7XG4gICAgICAgIGNvbnN0IGhyZWYgPSAoJGEuYXR0cignaHJlZicpIHx8ICcnKS50cmltKCk7XG4gICAgICAgIGlmICghaHJlZikgY29udGludWU7XG4gICAgICAgIGxldCBhYnNIcmVmID0gaHJlZjtcbiAgICAgICAgdHJ5IHsgYWJzSHJlZiA9IG5ldyBVUkwoaHJlZiwgb3JpZ2luKS50b1N0cmluZygpOyB9IGNhdGNoIHt9XG4gICAgICAgIGlmIChhYnNIcmVmID09PSBvcmlnaW4gKyAnLycgfHwgYWJzSHJlZiA9PT0gb3JpZ2luKSB7XG4gICAgICAgICAgY29uc3QgaW1nID0gJGEuZmluZCgnaW1nJykuZmlyc3QoKTtcbiAgICAgICAgICBpZiAoaW1nICYmIGltZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBzcmMgPSBpbWcuYXR0cignc3JjJykgfHwgaW1nLmF0dHIoJ2RhdGEtc3JjJykgfHwgaW1nLmF0dHIoJ2RhdGEtbGF6eScpIHx8ICcnO1xuICAgICAgICAgICAgc3JjID0gYWJzb2x1dGVVcmwoYmFzZSwgc3JjKTtcbiAgICAgICAgICAgIGlmIChzcmMpIHJldHVybiB7IHVybDogc3JjIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHN2ZyA9ICRhLmZpbmQoJ3N2ZycpLmZpcnN0KCk7XG4gICAgICAgICAgaWYgKHN2ZyAmJiBzdmcubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJC5odG1sKHN2Zyk7XG4gICAgICAgICAgICBpZiAoaHRtbCkgcmV0dXJuIHsgc3ZnOiBodG1sIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIHt9XG5cbiAgLy8gSGV1cmlzdGljOiBsYXJnZXN0IGltYWdlIG5lYXIgdG9wIG9mIGJvZHkgd2l0aGluIGZpcnN0IDEwIGltYWdlcyAob2Z0ZW4gdGhlIGxvZ28gaWYgYWJvdmUgZmFpbHMpXG4gIHRyeSB7XG4gICAgY29uc3QgaW1ncyA9ICQoJ2ltZycpLnNsaWNlKDAsIDEwKS50b0FycmF5KCk7XG4gIC8vIFVzaW5nICdhbnknIGZvciBub2RlIHJlZmVyZW5jZSB0byBhdm9pZCB0aWdodCBjb3VwbGluZyB0byBjaGVlcmlvIGludGVybmFsIHR5cGVzIGFjcm9zcyB2ZXJzaW9uc1xuICBsZXQgYmVzdDogeyBlbDogYW55OyBzY29yZTogbnVtYmVyOyBzcmM6IHN0cmluZyB9IHwgbnVsbCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBlbCBvZiBpbWdzKSB7XG4gICAgICBjb25zdCAkaW1nID0gJChlbCBhcyBhbnkpO1xuICAgICAgbGV0IHNyYyA9ICRpbWcuYXR0cignc3JjJykgfHwgJGltZy5hdHRyKCdkYXRhLXNyYycpIHx8ICcnO1xuICAgICAgaWYgKCFzcmMpIGNvbnRpbnVlO1xuICAgICAgc3JjID0gYWJzb2x1dGVVcmwoYmFzZSwgc3JjKTtcbiAgICAgIC8vIFNraXAgdHJhY2tpbmcgcGl4ZWxzIC8gc3ByaXRlc1xuICAgICAgaWYgKC9cXC5naWYkL2kudGVzdChzcmMpIHx8IC9zcHJpdGUvaS50ZXN0KHNyYykgfHwgL2xvYWRpbmd8cGxhY2Vob2xkZXIvaS50ZXN0KHNyYykpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgdyA9IHBhcnNlSW50KCRpbWcuYXR0cignd2lkdGgnKSB8fCAnMCcsIDEwKTtcbiAgICAgIGNvbnN0IGggPSBwYXJzZUludCgkaW1nLmF0dHIoJ2hlaWdodCcpIHx8ICcwJywgMTApO1xuICAgICAgY29uc3QgYXJlYSA9IChpc05hTih3KSB8fCBpc05hTihoKSA/IDAgOiB3ICogaCk7XG4gICAgICAvLyBQZW5hbGl6ZSBodWdlIGJhbm5lci1saWtlIGltYWdlcyAodmVyeSB3aWRlIGFuZCB0YWxsKVxuICAgICAgY29uc3QgcGVuYWx0eSA9ICh3ID4gODAwICYmIGggPiAzMDApID8gMC4yIDogMTtcbiAgICAgIGNvbnN0IHNjb3JlID0gKGFyZWEgfHwgMCkgKiBwZW5hbHR5O1xuICAgICAgaWYgKCFiZXN0IHx8IHNjb3JlID4gYmVzdC5zY29yZSkgYmVzdCA9IHsgZWwsIHNjb3JlLCBzcmMgfTtcbiAgICB9XG4gICAgaWYgKGJlc3QgJiYgYmVzdC5zcmMpIHJldHVybiB7IHVybDogYmVzdC5zcmMgfTtcbiAgfSBjYXRjaCB7fVxuICByZXR1cm4ge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgY29uc3QgeyB1cmwgfSA9IHJlcS5xdWVyeTtcbiAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnTWlzc2luZyB1cmwgcGFyYW1ldGVyJyB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsIHsgbWF4UmVkaXJlY3RzOiA1LCBoZWFkZXJzOiB7ICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wJyB9IH0pO1xuICAgIGNvbnN0IGh0bWwgPSByZXNwb25zZS5kYXRhIGFzIHN0cmluZztcbiAgICBjb25zdCAkID0gY2hlZXJpby5sb2FkKGh0bWwpO1xuICAgIC8vIFJlbW92ZSBtZWdhLW1lbnUgY29udGVudCBnbG9iYWxseSBiZWZvcmUgZXh0cmFjdGlvblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZU1lZ2EgPSAvbWVnYVstXyBdP21lbnUvaTtcbiAgICAgIGNvbnN0IHRvUmVtb3ZlID0gJCgnW2NsYXNzXScpLmZpbHRlcigoXywgZWwpID0+IHJlTWVnYS50ZXN0KCgkKGVsKS5hdHRyKCdjbGFzcycpIHx8ICcnKSkpLnRvQXJyYXkoKTtcbiAgICAgIGlmICh0b1JlbW92ZS5sZW5ndGgpICQodG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgY29uc3QgYmFzZSA9IG5ldyBVUkwodXJsKS50b1N0cmluZygpO1xuXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IHBhcnNlUHJvZHVjdCh1cmwpO1xuICAgIGNvbnN0IHN0b3JlTmFtZSA9IGV4dHJhY3RTdG9yZU5hbWUoJCwgdXJsKTtcbiAgICBjb25zdCBsb2dvT2JqID0gZXh0cmFjdExvZ28oJCwgdXJsKTtcbiAgICBjb25zdCBoZXJvSW1hZ2VzID0gY29sbGVjdEltYWdlcygkLCBiYXNlLCAnaGVybycpO1xuICAgIC8vIFByZWZlciBtb2JpbGUtYmFubmVyIGltYWdlcyBvbiBjdXJyZW50IHBhZ2U7IHRoZW4gYWxzbyB0cnkgaG9tZXBhZ2UgYW5kIG1lcmdlL2RlZHVwZVxuICAgIGxldCBiYW5uZXJJbWFnZXMgPSBjb2xsZWN0TW9iaWxlQmFubmVySW1hZ2VzKCQsIGJhc2UpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvcmlnaW4gPSBuZXcgVVJMKGJhc2UpLm9yaWdpbjtcbiAgICAgIGNvbnN0IGhvbWVSZXMgPSBhd2FpdCBheGlvcy5nZXQob3JpZ2luLCB7IGhlYWRlcnM6IHsgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAnIH0sIG1heFJlZGlyZWN0czogNSB9KTtcbiAgICAgIGNvbnN0ICRob21lID0gY2hlZXJpby5sb2FkKGhvbWVSZXMuZGF0YSBhcyBzdHJpbmcpO1xuICAgICAgY29uc3QgaG9tZUJhbm5lcnMgPSBjb2xsZWN0TW9iaWxlQmFubmVySW1hZ2VzKCRob21lLCBvcmlnaW4gKyAnLycpO1xuICAgICAgYmFubmVySW1hZ2VzID0gQXJyYXkuZnJvbShuZXcgU2V0KFsuLi5iYW5uZXJJbWFnZXMsIC4uLmhvbWVCYW5uZXJzXSkpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIC8vIGlnbm9yZSBob21lcGFnZSBmZXRjaCBlcnJvcnNcbiAgICB9XG4gICAgaWYgKGJhbm5lckltYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJhbm5lckltYWdlcyA9IGNvbGxlY3RJbWFnZXMoJCwgYmFzZSwgJ2Jhbm5lcicpO1xuICAgIH1cbiAgICBjb25zdCB7IGNhbmRpZGF0ZXM6IGNvbG9yQ2FuZGlkYXRlcywgcHJpbWFyeTogcHJpbWFyeUNvbG9yLCB0ZXh0OiB0ZXh0Q29sb3IgfSA9IGV4dHJhY3RQcmltYXJ5QW5kVGV4dCgkKTtcbiAgICAvLyBFeHRyYWN0IGFubm91bmNlbWVudCBjb3B5IHRleHQgaWYgcHJlc2VudFxuICAgIGxldCBhbm5vdW5jZW1lbnRDb3B5ID0gJyc7XG4gICAgY29uc3QgYW5uID0gJCgnW2NsYXNzKj1cImFubm91bmNlbWVudFwiIGldLCBbY2xhc3MqPVwiYW5vdW5jZW1lbnRcIiBpXScpLmZpcnN0KCk7XG4gICAgaWYgKGFubiAmJiBhbm4ubGVuZ3RoKSB7XG4gICAgICBhbm5vdW5jZW1lbnRDb3B5ID0gKGFubi50ZXh0KCkgfHwgJycpLnJlcGxhY2UoL1xccysvZywnICcpLnRyaW0oKTtcbiAgICB9XG4gICAgY29uc3QgZm9udEZhbWlsaWVzID0gZXh0cmFjdEZvbnRzKCQpO1xuXG4gICAgY29uc3QgcGF5bG9hZDogQW5hbHl6ZVJlc3BvbnNlID0ge1xuICAgICAgc3RvcmVOYW1lLFxuICAgICAgbG9nbzogbG9nb09iai51cmwsXG4gICAgICBsb2dvU3ZnOiBsb2dvT2JqLnN2ZyxcbiAgICAgIGhlcm9JbWFnZXMsXG4gICAgICBiYW5uZXJJbWFnZXMsXG4gICAgICBjb2xvclNjaGVtZTogcHJpbWFyeUNvbG9yID8gW3ByaW1hcnlDb2xvcl0gOiBbXSxcbiAgICAgIHByaW1hcnlDb2xvcixcbiAgICAgIHRleHRDb2xvcixcbiAgICAgIGNvbG9yQ2FuZGlkYXRlczogY29sb3JDYW5kaWRhdGVzLFxuICAgICAgZm9udEZhbWlsaWVzLFxuICAgICAgYW5ub3VuY2VtZW50Q29weSxcbiAgICAgIHByb2R1Y3RcbiAgICB9O1xuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FuYWx5emUgZXJyb3InLCBlcnIubWVzc2FnZSB8fCBlcnIpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gYW5hbHl6ZSBwYWdlJyB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImF4aW9zIiwiY2hlZXJpbyIsInBhcnNlUHJvZHVjdCIsImFic29sdXRlVXJsIiwiYmFzZSIsInVybCIsInN0YXJ0c1dpdGgiLCJVUkwiLCJvcmlnaW4iLCJ0b1N0cmluZyIsInJnYlRvSGV4IiwiaW5wdXQiLCJtIiwibWF0Y2giLCJyIiwiTWF0aCIsIm1heCIsIm1pbiIsInBhcnNlSW50IiwiZyIsImIiLCJ0b0hleCIsIm4iLCJwYWRTdGFydCIsInRvVXBwZXJDYXNlIiwibm9ybWFsaXplQ29sb3IiLCJ2YWwiLCJjbGVhbmVkIiwidHJpbSIsInJlcGxhY2UiLCJ0ZXN0IiwiaGV4IiwiYXNIZXgiLCJleHRyYWN0Q29sb3JDYW5kaWRhdGVzIiwiJCIsImJhc2VDc3NUZXh0cyIsImNhbmRpZGF0ZXMiLCJwdXNoIiwic291cmNlIiwiY29sb3IiLCJjIiwiZWFjaCIsIl8iLCJlbCIsInN0eWxlIiwiYXR0ciIsIm1CZyIsIm1Cb3JkZXIiLCJjc3MiLCJyZUFubiIsImV4ZWMiLCJyZUN0YUJnIiwicmVDdGFCb3JkZXIiLCJyZVV0aWwiLCJyZUJ1dHRvblRhZyIsInNlZW4iLCJTZXQiLCJmaWx0ZXIiLCJoYXMiLCJhZGQiLCJleHRyYWN0UHJpbWFyeUFuZFRleHQiLCJzdHlsZXMiLCJjb250ZW50cyIsInRleHQiLCJwcmltYXJ5IiwidGhlbWUiLCJ0aGVtZUhleCIsInByZWZlcnJlZCIsInN1YnN0cmluZyIsInlpcSIsInVuZGVmaW5lZCIsImV4dHJhY3RGb250cyIsInNldCIsImhyZWYiLCJmYW0iLCJzZWFyY2hQYXJhbXMiLCJnZXQiLCJzcGxpdCIsImZvckVhY2giLCJjaHVuayIsIm1hdGNoZXMiLCJibG9ja2VkIiwiQXJyYXkiLCJmcm9tIiwiZiIsInRvTG93ZXJDYXNlIiwic2xpY2UiLCJjb2xsZWN0SW1hZ2VzIiwidHlwZSIsInJlc3VsdHMiLCJyZWdleCIsIiRlbCIsImNscyIsInBhcmVudCIsImlkIiwic3JjIiwid0F0dHIiLCJva0J5QXR0ciIsImlzTmFOIiwib2tCeVNyYyIsImNvbGxlY3RNb2JpbGVCYW5uZXJJbWFnZXMiLCJleHRyYWN0U3RvcmVOYW1lIiwiYmFzZVVybCIsIm9nIiwidGl0bGUiLCJmaXJzdCIsImhvc3QiLCJob3N0bmFtZSIsImV4dHJhY3RMb2dvIiwibG9nb0NvbnRhaW5lcnMiLCJ0b0FycmF5Iiwic3ZnIiwiZmluZCIsImxlbmd0aCIsImh0bWwiLCJpbWciLCJjYW5kIiwiZmFsbGJhY2siLCJoZWFkZXJTZWxlY3RvcnMiLCIkaGVhZGVyIiwiam9pbiIsImFuY2hvcnMiLCJhIiwiJGEiLCJhYnNIcmVmIiwiaW1ncyIsImJlc3QiLCIkaW1nIiwidyIsImgiLCJhcmVhIiwicGVuYWx0eSIsInNjb3JlIiwiaGFuZGxlciIsInJlcSIsInJlcyIsInF1ZXJ5Iiwic3RhdHVzIiwianNvbiIsImVycm9yIiwicmVzcG9uc2UiLCJtYXhSZWRpcmVjdHMiLCJoZWFkZXJzIiwiZGF0YSIsImxvYWQiLCJyZU1lZ2EiLCJ0b1JlbW92ZSIsInJlbW92ZSIsInByb2R1Y3QiLCJzdG9yZU5hbWUiLCJsb2dvT2JqIiwiaGVyb0ltYWdlcyIsImJhbm5lckltYWdlcyIsImhvbWVSZXMiLCIkaG9tZSIsImhvbWVCYW5uZXJzIiwiY29sb3JDYW5kaWRhdGVzIiwicHJpbWFyeUNvbG9yIiwidGV4dENvbG9yIiwiYW5ub3VuY2VtZW50Q29weSIsImFubiIsImZvbnRGYW1pbGllcyIsInBheWxvYWQiLCJsb2dvIiwibG9nb1N2ZyIsImNvbG9yU2NoZW1lIiwiZXJyIiwiY29uc29sZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/analyze.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fanalyze.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();